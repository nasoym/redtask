#!/bin/bash

function print_details() {
# #\(.fixed_version.name)\
# #parent:\(.parent.id)\
# #assign:\(.assigned_to.name)\
# #\\\"\(.subject)\\\"\
  local JSON="$1"
  local LEADING_SPACES="$2"
  #local FEATURE=$(echo "$JSON" | jq -r 'if .tracker_name == "Feature" then 1 else 0 end')
  local FEATURE=$(echo "$JSON" | jq -r 'if .tracker.id == 2 then 1 else 0 end')
  if [ "$FEATURE" -eq 1 ]; then
    LINE="$(echo "$JSON" |\
    jq -r \
"\"$LEADING_SPACES\
\(.id)\
 [\(.estimated_hours//\"-\")]\
 [\(.done_ratio//\"-\")%:\(.story_points//\"-\")p]\
\(if (.release.release.name!=null) then \" (\(.release.release.id))\" else \"\" end)\
\(if ( (.cjson.tags != null) and ((.cjson.tags|length) > 0) ) then \" (\(.cjson.tags|join(\",\")))\" else \"\" end )\
\(if (.assigned_to.name!=null) then \" \(.assigned_to.name)\" else \"\" end):\
 \\\"\(.subject)\\\"\
\"" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"
#\(if (.release.release.name!=null) then \" \(.release.release.name)(\(.release.release.id))\" else \"\" end)\

    tput setaf 5
    echo -n "$LINE"
    tput sgr0
  else
    LINE="$(echo "$JSON" |\
    jq -r \
"\"$LEADING_SPACES\
\(.id)\
 [\(.estimated_hours//\"-\")]\
\(if ( (.cjson.tags != null) and ((.cjson.tags|length) > 0) ) then \" (\(.cjson.tags|join(\",\")))\" else \"\" end )\
\(if (.assigned_to.name!=null) then \" \(.assigned_to.name)\" else \"\" end):\
 \\\"\(.subject)\\\"\
\"" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"

    #local STATUS_IN_WORK=$(echo "$JSON" | jq -r 'if .status.id == 2 then 1 else 0 end')
    #if [ "$STATUS_IN_WORK" -eq 1 ]; then
    if [ "$(echo "$JSON" | jq -r 'if .status.id == 2 then 1 else 0 end')" -eq 1 ];then
      tput setaf 2
      echo -n "$LINE"
      tput sgr0
    else
      tput bold
      tput setaf 6
      echo -n "$LINE"
      tput sgr0
    fi
  fi
  echo -n "$(echo "$JSON" |\
    jq -r "\
if (.cjson.deliverable != null) then \"\n${LEADING_SPACES}${CHILD_LEADING_SPACES}${CHILD_LEADING_SPACES}deliverable:\
'\(.cjson.deliverable)'\" else \"\" end" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"
  echo -n "$(echo "$JSON" |\
    jq -r "\
if (.cjson.requirements != null) then \"\n${LEADING_SPACES}${CHILD_LEADING_SPACES}${CHILD_LEADING_SPACES}requirements:\
'\(.cjson.requirements)'\" else \"\" end" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"
  echo -n "$(echo "$JSON" |\
    jq -r "\
if ((.cjson.complexity!= null)or(.cjson.innovation!=null)or(.cjson.pairing!=null)) then \"\n${LEADING_SPACES}${CHILD_LEADING_SPACES}${CHILD_LEADING_SPACES}\
clx:\(.cjson.complexity//\"-\") inv:\(.cjson.innovation//\"-\") pair:\(.cjson.pairing//\"-\")\" else \"\" end" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"

#clx:\(.cjson.complexity//\"-\") inv:\(.cjson.innovation//\"-\") 


  echo
#  echo "$(echo "$JSON" |\
#    jq -r "\
#if (.release.release.name != null) then \"\n${LEADING_SPACES}${CHILD_LEADING_SPACES}${CHILD_LEADING_SPACES}release:\
#\(.release.release.name) (\(.release.release.id))\" else \"\" end" |\
#    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"


}

function print_default() {
  local JSON="$1"
  local LEADING_SPACES="$2"
  #local FEATURE=$(echo "$JSON" | jq -r 'if .tracker_name == "Feature" then 1 else 0 end')
  local FEATURE=$(echo "$JSON" | jq -r 'if .tracker.id == 2 then 1 else 0 end')
  if [ "$FEATURE" -eq 1 ]; then
    LINE="$(echo "$JSON" |\
    jq -r \
"\"$LEADING_SPACES\
\(.id)\
 [\(.estimated_hours//\"-\")]\
 [\(.done_ratio//\"-\")%:\(.story_points//\"-\")p]\
\(if (.release.release.name!=null) then \" (\(.release.release.id))\" else \"\" end)\
\(if ( (.cjson.tags != null) and ((.cjson.tags|length) > 0) ) then \" (\(.cjson.tags|join(\",\")))\" else \"\" end )\
\(if (.assigned_to.name!=null) then \" \(.assigned_to.name)\" else \"\" end):\
 \\\"\(.subject)\\\"\
\"" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"
#\(if (.release.release.name!=null) then \" \(.release.release.name)(\(.release.release.id))\" else \"\" end)\

    tput setaf 5
    echo "$LINE"
    tput sgr0
  else
    LINE="$(echo "$JSON" |\
    jq -r \
"\"$LEADING_SPACES\
\(.id)\
 [\(.estimated_hours//\"-\")]\
\(if ( (.cjson.tags != null) and ((.cjson.tags|length) > 0) ) then \" (\(.cjson.tags|join(\",\")))\" else \"\" end )\
\(if (.assigned_to.name!=null) then \" \(.assigned_to.name)\" else \"\" end):\
 \\\"\(.subject)\\\"\
\"" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"
#clx:\(.cjson.complexity//\"-\") inv:\(.cjson.innovation//\"-\") 

    #local STATUS_IN_WORK=$(echo "$JSON" | jq -r 'if .status.id == 2 then 1 else 0 end')
    #if [ "$STATUS_IN_WORK" -eq 1 ]; then
    #echo ">>>>>>>>>>>>$(echo "$JSON" | jq -r '.status.id')"
    if [ "$(echo "$JSON" | jq -r 'if .status.id == 2 then 1 else 0 end')" = "1" ];then
      tput bold
      tput setaf 2
      echo "$LINE"
      tput sgr0
    elif [ "$(echo "$JSON" | jq -r 'if ((.status.id == 5)or(.status.id==6)) then 1 else 0 end')" = "1" ];then
      tput bold
      tput setaf 1
      echo "$LINE"
      tput sgr0
    else
      tput bold
      tput setaf 6
      echo "$LINE"
      tput sgr0
    fi
  fi
}

function json_line_print(){
  local JSON="$1"
  local PRINT_COMMAND="$2"
  local LEADING_SPACES="$3"
  $PRINT_COMMAND "$JSON" "$LEADING_SPACES"
  for CHILD_JSON in $(echo "$JSON" | jq -r -c 'if has("children") then .children[] else "" end'); do
    json_line_print "$CHILD_JSON" "$PRINT_COMMAND" "$LEADING_SPACES$CHILD_LEADING_SPACES" 
  done
}

while true;do
  if [ "$#" -ge 1 ]; then
    if [ "$1" = "lines" ]; then
      shift
      load_json_content_of_ids
      for TASK_JSON in $( echo "$ALL_TASKS_JSON" | jq -c '.[]' ); do
        json_line_print "$TASK_JSON" print_default
      done

    elif [ $(echo "$1" | grep "lines:[a-zA-Z0-9_-]*") ]; then
      PRINT_COMMAND=$(echo "$1" | sed 's/^lines://g')
      shift
      if [ -z "$PRINT_COMMAND" ]; then
        PRINT_COMMAND="print_command_details"
      fi
      load_json_content_of_ids
      for TASK_JSON in $( echo "$ALL_TASKS_JSON" | jq -c '.[]' ); do
        json_line_print "$TASK_JSON" "$PRINT_COMMAND"
      done

    elif [ "$1" = "report" ]; then
      shift
      load_json_content_of_ids
      #TOTAL_ESTIMATED=$(echo "$ALL_TASKS_JSON" | jq '[.[] | .estimated_hours] | add')
      #TOTAL_ESTIMATED=$(echo "$ALL_TASKS_JSON" | jq -c '[.[] | .estimated_hours]')
      #echo "total estimated hours: $TOTAL_ESTIMATED"
      TOTAL_HOURS="0 "
      TOTAL_HOURS_WITH_FACTOR="0 "
      for TASK_JSON in $( echo "$ALL_TASKS_JSON" | jq -c '.[]' ); do
        ID=$(echo "$TASK_JSON" | jq '.id')
        HOURS=$(echo "$TASK_JSON" | jq '.estimated_hours//0')
        COMPLEXITY=$(echo "$TASK_JSON" | jq '.cjson.complexity//0')
        INNOVATION=$(echo "$TASK_JSON" | jq '.cjson.innovation//0')
        PAIRING=$(echo "$TASK_JSON" | jq '.cjson.pairing//0')

        #echo "------------------------------"
        #echo "HOURS:>$HOURS<"
        #echo "COMPLEXITY:>$COMPLEXITY<"
        #echo "INNOVATION:>$INNOVATION<"
        #echo "PAIRING:>$PAIRING<"

        PAIRING_FACTOR=$( echo "1 + $PAIRING / 2" | bc -ql)
        #echo "PAIRING_FACTOR:>$PAIRING_FACTOR<"
        RISK_SELECTOR=$(( COMPLEXITY * 3 + INNOVATION ))
        #echo "RISK_SELECTOR:>$RISK_SELECTOR<"

        RISK_TABLE="[1.1637223975, 1.1980530973, 1.9808695652, 1.5203299941, 1.5320987654, 1.8945454545, 1.7795275591, 1.3245614035, 2.3448275862]"
        #RISK_TABLE="[10,20,30,40,50,60,70,80,90]"
        RISK_FACTOR=$(echo "$RISK_TABLE" | jq -r -c ".[$RISK_SELECTOR]")
        #echo "RISK_FACTOR:>$RISK_FACTOR<"

        FINAL_HOURS=$( echo "scale=2; $RISK_FACTOR * $PAIRING_FACTOR * $HOURS" | bc -ql)
        #echo "FINAL_HOURS:>$FINAL_HOURS<"

        FINAL_HOURS_SHORT=$(printf "%0.1f\n" $FINAL_HOURS)
        #echo "FINAL_HOURS_SHORT:>$FINAL_HOURS_SHORT<"
        echo "$ID: ($HOURS) : $FINAL_HOURS_SHORT"
        TOTAL_HOURS+=" + $HOURS"
        TOTAL_HOURS_WITH_FACTOR+=" + $FINAL_HOURS_SHORT"
      done

      TOTAL_HOURS=$( echo "$TOTAL_HOURS" | bc )
      TOTAL_HOURS_WITH_FACTOR=$( echo "$TOTAL_HOURS_WITH_FACTOR" | bc )
      #echo "TOTAL_HOURS:>$TOTAL_HOURS<"
      #echo "TOTAL_HOURS_WITH_FACTOR:>$TOTAL_HOURS_WITH_FACTOR<"

      echo "    : ($TOTAL_HOURS) :$TOTAL_HOURS_WITH_FACTOR"

    elif [ "$1" = "pretty" ]; then
      shift
      load_json_content_of_ids
      echo "$ALL_TASKS_JSON" | jq '.'

    elif [ "$1" = "json" ]; then
      shift
      load_json_content_of_ids
      echo "$ALL_TASKS_JSON"

    elif [ "$1" = "ids" ]; then
      shift
      echo "$IDS"

    elif [ "$1" = "csids" ]; then
      shift
      COMMA_SEPARATED_IDS=""
      for ID in $IDS; do
        if [ -z "$COMMA_SEPARATED_IDS" ];then
          COMMA_SEPARATED_IDS="$ID"
        else
          COMMA_SEPARATED_IDS+=",$ID"
        fi
      done
      echo "$COMMA_SEPARATED_IDS"

    elif [ $(echo "$1" | grep "print:[a-zA-Z0-9_-]\{1,\}") ]; then
      VARIABLE_NAME=$(echo "$1" | sed 's/^print://g')
      shift
      eval $VARIABLE_NAME

    else
      break
    fi
  else
    break
  fi
done


