#!/bin/bash

SCRIPT_PATH=$(dirname $0)

source $SCRIPT_PATH/_redmine_api_config_file
source $SCRIPT_PATH/_redtask_options

if [ -z "$SERVER" ] || [ -z "$PROJECT_ID" ] || [ -z "$KEY" ]; then
  echo "SERVER,PROJECT_ID or KEY variable are not defined." >&2
  echo "  These variables should either be defined as environments variables," >&2
  echo "  or in a .redmine file in the current directory or the users home directory." >&2
  exit 1
fi

source $SCRIPT_PATH/_redtask_filters
source $SCRIPT_PATH/_redtask_operations
source $SCRIPT_PATH/_redtask_print

exit


function write_issue() {
  ISSUE_ID=$1
  VALUES=$2
  #echo "write issue"
  #echo "ID:$ISSUE_ID"
  #echo "VALUES: $VALUES"
  #echo "$VALUES" | sed -e "s/^/{'issue':{/g" -e "s/$/}}/g" -e "s/'/\"/g" |\
  CURL_STRING=$(echo "$VALUES" | sed -e "s/^/{'issue':{/g" -e "s/$/}}/g" -e "s/'/\"/g")
  #echo "CURL_STRING: $CURL_STRING"
  echo "$CURL_STRING" |\
  curl -X PUT -H "Content-type:application/json" -s -3 -d @- "https://${SERVER}/issues/${ISSUE_ID}.json?key=${KEY}"
}

if [ "$#" -ge 1 ]; then
  if [ $(echo "$1" | grep "^[0-9]*\(,[0-9]*\)*$") ]; then
    IDS=$(echo "$1" | tr ',' '\n')
    shift
    ALL_TASKS_JSON="$(load_json_of_ids "$IDS" $CHILD_DEPTH)"

    if [ "$1" = "sub" ]; then
      if [ -n "$2" ]; then
        for ID in $IDS
        do
          SUBJECT=$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ID)|.subject")
          if [ -n "$APPEND" ]; then
            write_issue $ID "'subject':'$SUBJECT$2'"
          else
            write_issue $ID "'subject':'$2'"
          fi
        done
      else 
        echo "$ALL_TASKS_JSON" | jq -r '.[] | .subject'
      fi

    elif [ "$1" = "des" ]; then
      if [ -n "$2" ]; then
        for ID in $IDS
        do
          VALUE=$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ID)|.description")
          if [ -n "$APPEND" ]; then
            write_issue $ID "'description':'$VALUE$2'"
          else
            write_issue $ID "'description':'$2'"
          fi
        done
      else 
        echo "$ALL_TASKS_JSON" | jq -r '.[] | .description'
      fi

    elif [ "$1" = "key" ] && [ -n "$2" ]; then
      KEY="$2"
      if [ -n "$3" ]; then
        for ID in $IDS
        do
          OLD_VALUE=$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ID)|.$KEY")
          if [ -n "$APPEND" ]; then
            NEW_VALUE="${OLD_VALUE}$3"
          else
            NEW_VALUE="$3"
          fi
          write_issue $ID "'$KEY':'$NEW_VALUE'"
        done
      else 
        echo "$ALL_TASKS_JSON" | jq -r ".[] | .$KEY"
      fi



    elif [ "$1" = "jdes" ]; then
      if [ -n "$2" ]; then
        for ID in $IDS
        do
          OLD_VALUE=$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ID)|.description")
          if [ -n "$APPEND" ]; then
            if [ $(assert_json "$OLD_VALUE") ]; then
              #redtask 3126 des "{\\\"hi\\\":4}"
              # $2='.a="4" | .b=5'
              if [ -z "$OLD_VALUE" ];then
                OLD_VALUE="{}"
              fi
              NEW_VALUE=$(echo "$OLD_VALUE" | jq -c "$2" | sed -e 's/"/\\\"/g')
              write_issue $ID "'description':'$NEW_VALUE'"
            else
              echo "description was not a json content"
            fi
          else
            NEW_VALUE=$(echo "$2" | sed -e 's/"/\\\"/g')
            write_issue $ID "'description':'$NEW_VALUE'"
          fi
        done
      else 
        for ID in $IDS
        do
          OLD_VALUE=$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ID)|.description")
          if [ $(assert_json "$OLD_VALUE") ]; then
            :
          else
            echo "description was not a json content"
          fi
          echo "$OLD_VALUE"
        done
      fi
    fi

  fi
fi



