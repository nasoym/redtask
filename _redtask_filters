#!/bin/bash

FILTERED_TASKS="$ALL_TASKS_JSON"
while true;do
  if [ "$#" -ge 1 ]; then

    OR_FILTER=0
    PREVIOUS=""

    if [ "$1" = "or" ]; then
      shift
      OR_FILTER=1
      OLD_FILTERED_TASKS="$FILTERED_TASKS"
      FILTERED_TASKS="$ALL_TASKS_JSON"
    fi

    if [ "$1" = "feature" ]; then
      shift
      NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" |\
      jq -c "[.[]| select(.tracker.id == 2) ]" )

    elif [ "$1" = "bug" ]; then
      shift
      NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" |\
      jq -c "[.[]| select(.tracker.id == 1) ]" )

    elif [ "$1" = "task" ]; then
      shift
      NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" |\
      jq -c "[.[]| select(.tracker.id == 4) ]" )

    elif [ "$1" = "open" ]; then
      shift
      NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" |\
      jq -c "[.[]| select((.status.id == $STATUS_NEW)or(.status.id==$STATUS_DOING)) ]" )

    elif [ $(echo "$1" | grep "filter:[a-zA-Z0-9_-]\{1,\}") ]; then
      VARIABLE_NAME=$(echo "$1" | sed 's/^filter://g')
      shift
      load_json_content_of_ids
      NEW_FILTERED_TASKS="$(eval $VARIABLE_NAME)"

    elif [ "$(echo "$1" | grep "\+[a-zA-Z_][a-zA-Z0-9_-]*")" ]; then
      TAG="$(echo "$1" | sed -e 's/^+//g')"
      shift
      load_json_content_of_ids
      NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" |\
      jq -c "map(select( (.cjson.tags!=null) and (.cjson.tags|contains([\"$TAG\"])) ))" )

    #TODO: tag filtering does not really work since printing uses the all tasks list to show children of tasks
    elif [ "$(echo "$1" | grep "\-[a-zA-Z_][a-zA-Z0-9_-]*")" ]; then
      TAG="$(echo "$1" | sed -e 's/^-//g')"
      shift
      load_json_content_of_ids
      NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" |\
      jq -c "map(select( (.cjson.tags==null) or (.cjson.tags|contains([\"$TAG\"])|not) ))" )

    elif [ "$1" = "unassign" ]; then
      shift
      load_json_content_of_ids
      NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" | jq -c "[.[]| select(.assigned_to==null)]" )

    elif [ $(echo "$1" | grep "\<id:[0-9]*\>") ]; then
      ID=$(echo "$1" | sed 's/^id://g')
      shift
      load_json_content_of_ids
      NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" | jq -c "[.[]| select(.id==$ID)]" )

    elif [ $(echo "$1" | grep "\<category:[0-9]*\>") ]; then
      CATEGORY_ID=$(echo "$1" | sed 's/^category://g')
      shift
      load_json_content_of_ids
      NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" | jq -c "[.[]| select(.category.id==$CATEGORY_ID)]" )

    elif [ $(echo "$1" | grep "\<category:[a-zA-Z0-9_-]*\>") ]; then
      CATEGORY_STRING=$(echo "$1" | sed 's/^category://g')
      shift
      load_json_content_of_ids
      MATCHING_CATEGORY_ID="$(category_by_name $CATEGORY_STRING)"
      if [ -n "$MATCHING_CATEGORY_ID" ];then
        NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" | jq -c "[.[]| select(.category.id==$MATCHING_CATEGORY_ID)]" )
      fi

    elif [ $(echo "$1" | grep "\<assign:[0-9]*\>") ]; then
      USER_ID=$(echo "$1" | sed 's/^assign://g')
      shift
      load_json_content_of_ids
      #TODO: how to provide a list of assignees
      NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" | jq -c "[.[]| select(.assigned_to.id==$USER_ID)]" )

    elif [ $(echo "$1" | grep "\<assign:[a-zA-Z0-9_-]*\>") ]; then
      USER_STRING=$(echo "$1" | sed 's/^assign://g')
      shift
      load_json_content_of_ids
      #TODO: how to provide a list of assignees
      MATCHING_USER_ID="$(project_member_by_name $USER_STRING)"
      if [ -n "$MATCHING_USER_ID" ];then
        NEW_FILTERED_TASKS=$(echo "$FILTERED_TASKS" | jq -c "[.[]| select(.assigned_to.id==$MATCHING_USER_ID)]" )
      fi

    else
      break
    fi

    if [ $OR_FILTER -eq 1 ]; then
        FILTERED_TASKS="$(echo -e "$(echo "$OLD_FILTERED_TASKS"| jq '.[]')\n$(echo "$NEW_FILTERED_TASKS" | jq '.[]')" | jq -s '.')"
    else
        FILTERED_TASKS="$NEW_FILTERED_TASKS"
    fi
    IDS="$( ids_from_json_array "$FILTERED_TASKS" )"

  else
    break
  fi
done
