#!/bin/bash

#function task_line_from_json(){
#    : ${SPACES:=''}
#    if [ "${EXTENDED}" == "1" ]; then
#      # TODO: when the description contains new lines ('\r\n')
#      #       the result is strange
#      jq -r -c "(if type == \"array\" then .[] else . end |\
#\"${SPACES}\(.id): [\(.spent_hours//\"!\")-\(.remaining_hours//\"!\")-\(.estimated_hours//\"!\")] \(.status_name) [\(.assigned_to_name)] : \(.subject) - \(.parent_id//\"\") \
#\(.fixed_version_name) \
#\(if (.description != null) and (.description != \"\") then (\"\n${SPACES}    \(.description)\") else \"\" end) \
#\(if (.notes | length) > 0 then ([.notes[] |\"\n${SPACES}    note: \(.notes)\"]| add ) else \"\" end) \
#\"\
#      )"
##\"${SPACES}\(.id): [\(.spent_hours//\"!\")-\(.remaining_hours//\"!\")-\(.estimated_hours//\"!\")] \(.status_name) [\(.assigned_to_name)] : \(.subject) - \(.parent_id) \(. fixed_version_name//\"\")\"\
#    else
#      echo "$1" | jq -r "(if type == \"array\" then .[] else . end |\
#\"${SPACES}\(.id): [\(.spent_hours//\"!\")-\(.remaining_hours//\"!\")-\(.estimated_hours//\"!\")] \(.status_name) [\(.assigned_to_name)] : '\(.subject)'\"\
#      )"
#    fi
#}

function print_command() {
  local JSON="$1"
  echo "$JSON" |\
  jq -r "\"\(.id) \(.subject) \(.cjson.tags//\"\") \"" |\
  sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g"
  #jq -r "\"\(.id) \(.subject) \(.status_name//\"\")\""
}

function print_command_details() {
  local JSON="$1"
  #local FEATURE=$(echo "$JSON" | jq -r 'if .tracker_name == "Feature" then 1 else 0 end')
  local FEATURE=$(echo "$JSON" | jq -r 'if .tracker.id == 2 then 1 else 0 end')
  if [ "$FEATURE" -eq 1 ]; then
    tput setaf 5
    echo "$JSON" |\
    jq -r "\"\(.id) [\(.done_ratio//\"-\"):\(.story_points//\"-\")] \(.assigned_to.name//\"\"): \\\"\(.subject)\\\"\"" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g"
    tput sgr0
  else
    local STATUS_IN_WORK=$(echo "$JSON" | jq -r 'if .status.id == 2 then 1 else 0 end')
    if [ "$STATUS_IN_WORK" -eq 1 ]; then
      tput setaf 3
      echo "$JSON" |\
      jq -r "\"\(.id) [\(.done_ratio//\"-\"):\(.estimated_hours//\"-\")] \(.assigned_to.name//\"\"): \\\"\(.subject)\\\"    \(.cjson.tags//\"\") \"" |\
      sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g"
      tput sgr0
    else
      echo "$JSON" |\
      jq -r "\"\(.id) [\(.done_ratio//\"-\"):\(.estimated_hours//\"-\")] \(.assigned_to.name//\"\"): \\\"\(.subject)\\\"    \(.cjson.tags//\"\")  \"" |\
      sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g"
    fi
  fi
}

function json_line_print(){
  local JSON="$1"
  local LEADING_SPACES="$2"
  local PRINT_COMMAND="$3"

  echo -n "$LEADING_SPACES"
  if [ -n "$PRINT_COMMAND" ]; then
    $PRINT_COMMAND "$JSON"
  else 
    print_command "$JSON"
  fi

  local CHILD_TASKS="$(echo "$JSON" | jq -r -c 'if has("children") then .children[] else "" end')"
  if [ -n "$CHILD_TASKS" ];then
    local OLD_IFS="$IFS"
    local IFS=$'\n'
    local IFS=${IFS:0:1}
    local ALL_CHILD_JSONS=(${CHILD_TASKS})
    local IFS=$OLD_IFS
    for CHILD_JSON in "${ALL_CHILD_JSONS[@]}"; do
      json_line_print "$CHILD_JSON" "$LEADING_SPACES    " "$PRINT_COMMAND"
    done
  fi
}

if [ "$#" -ge 1 ]; then
  if [ "$1" = "lines" ]; then
    shift
    load_json_content_of_ids
    #ALL_TASKS_JSON="$(echo "$ALL_TASKS_JSON" | jq -c '. | sort_by(.status_id) | reverse' )"
    TASK_JSON_LINES="$(echo "$ALL_TASKS_JSON" | jq -c '.[]')"

    OLD_IFS="$IFS"
    IFS=$'\n'
    IFS=${IFS:0:1}
    TASK_JSONS=(${TASK_JSON_LINES})
    IFS=$OLD_IFS

    for TASK_JSON in "${TASK_JSONS[@]}"; do
      json_line_print "$TASK_JSON" "" "print_command_details"
      #json_line_print "$TASK_JSON" "" "print_command"
    done

  elif [ "$1" = "pretty" ]; then
    shift
    load_json_content_of_ids
    echo "$ALL_TASKS_JSON" | jq '.'

  elif [ "$1" = "json" ]; then
    shift
    load_json_content_of_ids
    echo "$ALL_TASKS_JSON"

  elif [ "$1" = "ids" ]; then
    shift
    echo "$IDS"

  elif [ $(echo "$1" | grep "print:[a-zA-Z0-9_-]\{1,\}") ]; then
    VARIABLE_NAME=$(echo "$1" | sed 's/^print://g')
    shift
    eval $VARIABLE_NAME
  fi
else
  echo "$IDS"
fi

