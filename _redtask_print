#!/bin/bash

function print_details() {
  local JSON="$1"
  local LEADING_SPACES="$2"

  LINE="$(echo "$JSON" |\
  jq -r \
"\"$LEADING_SPACES\
\(.id)\
 \(.fixed_version.name)\
 parent:\(.parent.id)\
 assign:\(.assigned_to.name)\
 \\\"\(.subject)\\\"\
\"" |\
  sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"

  echo "$LINE"
}

function print_command_details() {
  local JSON="$1"
  local LEADING_SPACES="$2"
  #local FEATURE=$(echo "$JSON" | jq -r 'if .tracker_name == "Feature" then 1 else 0 end')
  local FEATURE=$(echo "$JSON" | jq -r 'if .tracker.id == 2 then 1 else 0 end')
  if [ "$FEATURE" -eq 1 ]; then
    LINE="$(echo "$JSON" |\
    jq -r \
"\"$LEADING_SPACES\
\(.id)\
[\(.done_ratio//\"-\")%:\(.story_points//\"-\")p]\
 \(.assigned_to.name//\"\"):\
 \\\"\(.subject)\\\"\
\"" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"

    tput setaf 5
    echo "$LINE"
    tput sgr0
  else
    LINE="$(echo "$JSON" |\
    jq -r \
"\"$LEADING_SPACES\
\(.id)\
 [\(.done_ratio//\"-\")%:\(.estimated_hours//\"-\")h]\
\(if (.cjson.tags != null) then \" (\(.cjson.tags|join(\",\")))\" else \"\" end )\
 \(.assigned_to.name//\"\"):\
 \\\"\(.subject)\\\"\
\"" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"
#clx:\(.cjson.complexity//\"-\") inv:\(.cjson.innovation//\"-\") 

    local STATUS_IN_WORK=$(echo "$JSON" | jq -r 'if .status.id == 2 then 1 else 0 end')
    if [ "$STATUS_IN_WORK" -eq 1 ]; then
      tput setaf 3
      echo "$LINE"
      tput sgr0
    else
      echo "$LINE"
    fi
  fi
}

function json_line_print(){
  local JSON="$1"
  local LEADING_SPACES="$2"
  local PRINT_COMMAND="$3"

  if [ -n "$PRINT_COMMAND" ]; then
    $PRINT_COMMAND "$JSON" "$LEADING_SPACES"
  else 
    print_command "$JSON" "$LEADING_SPACES"
  fi

  local CHILD_TASKS="$(echo "$JSON" | jq -r -c 'if has("children") then .children[] else "" end')"
  if [ -n "$CHILD_TASKS" ];then
    local OLD_IFS="$IFS"
    local IFS=$'\n'
    local IFS=${IFS:0:1}
    local ALL_CHILD_JSONS=(${CHILD_TASKS})
    local IFS=$OLD_IFS
    for CHILD_JSON in "${ALL_CHILD_JSONS[@]}"; do
      json_line_print "$CHILD_JSON" "$LEADING_SPACES    " "$PRINT_COMMAND"
    done
  fi
}

if [ "$#" -ge 1 ]; then
  if [ "$1" = "lines" ]; then
    shift
    load_json_content_of_ids
    #ALL_TASKS_JSON="$(echo "$ALL_TASKS_JSON" | jq -c '. | sort_by(.status_id) | reverse' )"
    TASK_JSON_LINES="$(echo "$ALL_TASKS_JSON" | jq -c '.[]')"

    OLD_IFS="$IFS"
    IFS=$'\n'
    IFS=${IFS:0:1}
    TASK_JSONS=(${TASK_JSON_LINES})
    IFS=$OLD_IFS

    for TASK_JSON in "${TASK_JSONS[@]}"; do
      json_line_print "$TASK_JSON" "" "print_command_details"
      #json_line_print "$TASK_JSON" "" "print_command"
    done

  elif [ $(echo "$1" | grep "lines:[a-zA-Z0-9_-]\{1,\}") ]; then
    PRINT_COMMAND=$(echo "$1" | sed 's/^lines://g')
    shift
    TASK_JSON_LINES="$(echo "$ALL_TASKS_JSON" | jq -c '.[]')"

    OLD_IFS="$IFS"
    IFS=$'\n'
    IFS=${IFS:0:1}
    TASK_JSONS=(${TASK_JSON_LINES})
    IFS=$OLD_IFS

    for TASK_JSON in "${TASK_JSONS[@]}"; do
      json_line_print "$TASK_JSON" "" "$PRINT_COMMAND"
    done

  elif [ "$1" = "pretty" ]; then
    shift
    load_json_content_of_ids
    echo "$ALL_TASKS_JSON" | jq '.'

  elif [ "$1" = "json" ]; then
    shift
    load_json_content_of_ids
    echo "$ALL_TASKS_JSON"

  elif [ "$1" = "ids" ]; then
    shift
    echo "$IDS"

  elif [ "$1" = "csids" ]; then
    shift
    FIRST_ELEMENT=true
    for ID in $IDS; do
      if [ "$FIRST_ELEMENT" = true ];then
        echo -n "$ID"
        FIRST_ELEMENT=false
      else
        echo -n ",$ID"
      fi
    done
    echo

  elif [ $(echo "$1" | grep "print:[a-zA-Z0-9_-]\{1,\}") ]; then
    VARIABLE_NAME=$(echo "$1" | sed 's/^print://g')
    shift
    eval $VARIABLE_NAME
  fi
else
  echo "$IDS"
fi

