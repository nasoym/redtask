#!/bin/bash

while true;do
  if [ "$#" -ge 1 ]; then

    if [ "$1" = "feature" ]; then
      shift
      ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" |\
      jq -c "[.[]| select(.tracker.id == 2) ]" )
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ "$1" = "bug" ]; then
      shift
      ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" |\
      jq -c "[.[]| select(.tracker.id == 1) ]" )
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ "$1" = "task" ]; then
      shift
      ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" |\
      jq -c "[.[]| select(.tracker.id == 4) ]" )
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ "$1" = "open" ]; then
      shift
      ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" |\
      jq -c "[.[]| select((.status.id == $STATUS_NEW)or(.status.id==$STATUS_DOING)) ]" )
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ $(echo "$1" | grep "filter:[a-zA-Z0-9_-]\{1,\}") ]; then
      VARIABLE_NAME=$(echo "$1" | sed 's/^filter://g')
      shift
      load_json_content_of_ids
      ALL_TASKS_JSON="$(eval $VARIABLE_NAME)"
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ "$(echo "$1" | grep "\+[a-zA-Z_][a-zA-Z0-9_-]*")" ]; then
      TAG="$(echo "$1" | sed -e 's/^+//g')"
      shift
      ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" |\
      jq -c "[.[]|\
      select( (.cjson.tags!=null) and (.cjson.tags|contains([\"$TAG\"])) )\
      ]" )
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ "$(echo "$1" | grep "\-[a-zA-Z_][a-zA-Z0-9_-]*")" ]; then
      TAG="$(echo "$1" | sed -e 's/^-//g')"
      shift
      ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" |\
      jq -c "[.[]|\
      select( (.cjson.tags==null) or (.cjson.tags|contains([\"$TAG\"])|not) )\
      ]" )
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ "$1" = "unassign" ]; then
      shift
      load_json_content_of_ids
      ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" | jq -c "[.[]| select(.assigned_to==null)]" )
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ $(echo "$1" | grep "\<category:[0-9]*\>") ]; then
      CATEGORY_ID=$(echo "$1" | sed 's/^category://g')
      shift
      load_json_content_of_ids
      ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" | jq -c "[.[]| select(.category.id==$CATEGORY_ID)]" )
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ $(echo "$1" | grep "\<category:[a-zA-Z0-9_-]*\>") ]; then
      CATEGORY_STRING=$(echo "$1" | sed 's/^category://g')
      shift
      load_json_content_of_ids
      MATCHING_CATEGORY_ID="$(category_by_name $CATEGORY_STRING)"
      if [ -n "$MATCHING_CATEGORY_ID" ];then
        ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" | jq -c "[.[]| select(.category.id==$MATCHING_CATEGORY_ID)]" )
      fi
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ $(echo "$1" | grep "\<assign:[0-9]*\>") ]; then
      USER_ID=$(echo "$1" | sed 's/^assign://g')
      shift
      load_json_content_of_ids
      #TODO: how to provide a list of assignees
      ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" | jq -c "[.[]| select(.assigned_to.id==$USER_ID)]" )
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ $(echo "$1" | grep "\<assign:[a-zA-Z0-9_-]*\>") ]; then
      USER_STRING=$(echo "$1" | sed 's/^assign://g')
      shift
      load_json_content_of_ids
      #TODO: how to provide a list of assignees
      MATCHING_USER_ID="$(project_member_by_name $USER_STRING)"
      if [ -n "$MATCHING_USER_ID" ];then
        ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" | jq -c "[.[]| select(.assigned_to.id==$MATCHING_USER_ID)]" )
      fi
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ "$1" = "flatten" ]; then
      shift
      load_json_content_of_ids
      for ID in $IDS; do
        #echo ">>$ID"
        #echo "ORIGINSL:$ALL_TASKS_JSON"
        JSON="$(echo "$ALL_TASKS_JSON" | jq -r -c ".[]| select(.id==$ID)")"
        #echo "JSON:$JSON"
        #TODO: only proceed if children are present
        CHILDREN="$( echo "$JSON" | jq -c '.children')" 
        #echo "CHILDREN:$CHILDREN"
        ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" |\
        jq -c "[.[] | if .id==$ID then .children=[] else . end]")
        #jq -c "select(.id==$ID)|.children=[]" )

        #echo "REMOVED:$ALL_TASKS_JSON"
        ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" |\
        jq -c ".+=$CHILDREN" )
        #echo "APPENDED:$ALL_TASKS_JSON"
      done
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    elif [ "$1" = "children" ]; then
      shift
      ALL_TASKS_JSON="$(load_json_of_ids "$IDS" 1)"
      ALL_TASKS_JSON="$(parse_custom_json_field "$ALL_TASKS_JSON" "$IDS")"

    elif [ "$1" = "load_details" ]; then
      #TODO: do not reload children if they are already loaded
      shift
      if [ -z "$ALL_TASKS_JSON" ] && [ -n "$IDS" ];then
        #echo "ids are provided but no content was loaded so far"
        load_json_content_of_ids
      elif [ -z "$ALL_TASKS_JSON" ] && [ -z "$IDS" ];then
        echo "neither ids nor content is provided"
      elif [ -n "$ALL_TASKS_JSON" ] && [ -z "$IDS" ];then
        #echo "content is provided but ids are not yet loaded"
        IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"
        ALL_TASKS_JSON=""
        load_json_content_of_ids
      elif [ -n "$ALL_TASKS_JSON" ] && [ -n "$IDS" ];then
        #echo "ids and content are provided"
        ALL_TASKS_JSON=""
        load_json_content_of_ids
      fi

    else
      break
    fi
  else
    break
  fi
done
