#!/bin/bash

function print_details() {
  local JSON="$1"
  local LEADING_SPACES="$2"

  LINE="$(echo "$JSON" |\
  jq -r \
"\"$LEADING_SPACES\
\(.id)\
 \(.fixed_version.name)\
 parent:\(.parent.id)\
 assign:\(.assigned_to.name)\
 \\\"\(.subject)\\\"\
\"" |\
  sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"

  echo "$LINE"
}

function print_command_details() {
  local JSON="$1"
  local LEADING_SPACES="$2"
  #local FEATURE=$(echo "$JSON" | jq -r 'if .tracker_name == "Feature" then 1 else 0 end')
  local FEATURE=$(echo "$JSON" | jq -r 'if .tracker.id == 2 then 1 else 0 end')
  if [ "$FEATURE" -eq 1 ]; then
    LINE="$(echo "$JSON" |\
    jq -r \
"\"$LEADING_SPACES\
\(.id)\
 [\(.done_ratio//\"-\")%:\(.story_points//\"-\")p]\
\(if (.release.release.name!=null) then \" \(.release.release.name)(\(.release.release.id))\" else \"\" end)\
\(if (.cjson.tags != null) then \" (\(.cjson.tags|join(\",\")))\" else \"\" end )\
\(if (.assigned_to.name!=null) then \" \(.assigned_to.name)\" else \"\" end):\
 \\\"\(.subject)\\\"\
\"" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"

    tput setaf 5
    echo "$LINE"
    tput sgr0
  else
    LINE="$(echo "$JSON" |\
    jq -r \
"\"$LEADING_SPACES\
\(.id)\
 [\(.estimated_hours//\"-\")]\
\(if (.cjson.tags != null) then \" (\(.cjson.tags|join(\",\")))\" else \"\" end )\
\(if (.assigned_to.name!=null) then \" \(.assigned_to.name)\" else \"\" end):\
 \\\"\(.subject)\\\"\
\"" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"
#clx:\(.cjson.complexity//\"-\") inv:\(.cjson.innovation//\"-\") 

    local STATUS_IN_WORK=$(echo "$JSON" | jq -r 'if .status.id == 2 then 1 else 0 end')
    if [ "$STATUS_IN_WORK" -eq 1 ]; then
      tput setaf 3
      echo "$LINE"
      tput sgr0
    else
      echo "$LINE"
    fi
  fi
}

function json_line_print(){
  local JSON="$1"
  local PRINT_COMMAND="$2"
  local LEADING_SPACES="$3"
  $PRINT_COMMAND "$JSON" "$LEADING_SPACES"
  for CHILD_JSON in $(echo "$JSON" | jq -r -c 'if has("children") then .children[] else "" end'); do
    json_line_print "$CHILD_JSON" "$PRINT_COMMAND" "$LEADING_SPACES$CHILD_LEADING_SPACES" 
  done
}

while true;do
  if [ "$#" -ge 1 ]; then
    if [ $(echo "$1" | grep "lines:[a-zA-Z0-9_-]*") ]; then
      PRINT_COMMAND=$(echo "$1" | sed 's/^lines://g')
      shift
      if [ -z "$PRINT_COMMAND" ]; then
        PRINT_COMMAND="print_command_details"
      fi
      load_json_content_of_ids
      for TASK_JSON in $( echo "$ALL_TASKS_JSON" | jq -c '.[]' ); do
        json_line_print "$TASK_JSON" "$PRINT_COMMAND"
      done

    elif [ "$1" = "report" ]; then
      shift
      load_json_content_of_ids
      TOTAL_ESTIMATED=$(echo "$ALL_TASKS_JSON" | jq '[.[] | .estimated_hours] | add')
      echo "total estimated hours: $TOTAL_ESTIMATED"

    elif [ "$1" = "pretty" ]; then
      shift
      load_json_content_of_ids
      echo "$ALL_TASKS_JSON" | jq '.'

    elif [ "$1" = "json" ]; then
      shift
      load_json_content_of_ids
      echo "$ALL_TASKS_JSON"

    elif [ "$1" = "ids" ]; then
      shift
      echo "$IDS"

    elif [ "$1" = "csids" ]; then
      shift
      COMMA_SEPARATED_IDS=""
      for ID in $IDS; do
        if [ -z "$COMMA_SEPARATED_IDS" ];then
          COMMA_SEPARATED_IDS="$ID"
        else
          COMMA_SEPARATED_IDS+=",$ID"
        fi
      done
      echo "$COMMA_SEPARATED_IDS"

    elif [ $(echo "$1" | grep "print:[a-zA-Z0-9_-]\{1,\}") ]; then
      VARIABLE_NAME=$(echo "$1" | sed 's/^print://g')
      shift
      eval $VARIABLE_NAME

    else
      break
    fi
  else
    break
  fi
done


