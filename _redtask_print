#!/bin/bash

WORST_CASE_SUM="0.0"
BEST_CASE_SUM="0.0"
TASK_VARIANCE_SUM="0.0"
SPENT_SUM="0.0"
SPENT_UNTRACKED_SUM="0.0"

EXPECTED_ESTIMATED_SUM="0.0"
EXPECTED_PERT_SUM="0.0"
EXPECTED_PERT2_SUM="0.0"

: ${DEVIATION_DIVISOR:="2.6"}
# 10% 0.25
# 20% 0.51
# 30% 0.77
# 40% 1.00
# 50% 1.40
# 60% 1.70
# 70% 2.10
# 80% 2.60
# 90% 3.30
# 99% 6.00

#   2%  : E - (2.00 * S)
#  10%  : E - (1.28 * S)
#  16%  : E - (1.00 * S)
#  20%  : E - (0.84  * S)
#  25%  : E - (0.67  * S)
#  30%  : E - (0.52  * S)
#  40%  : E - (0.25  * S)
#  50%  : E
#  60%  : E + (0.25  * S)
#  70%  : E + (0.52  * S)
#  75%  : E + (0.67  * S)
#  80%  : E + (0.84  * S)
#  84%  : E + (1.00  * S)
#  90%  : E + (1.28  * S)
#  98%  : E + (2.00  * S)

function showExpected() {
    local EXPECTED=$1
    local DEVIATION=$2
    local FACTOR=$3
    CALCULATED=$( wcalc -q -P1 "$EXPECTED + ($FACTOR * $DEVIATION)" | sed -e 's/^ *//g')
    echo "${CALCULATED}h $(wcalc -q -P1 "$CALCULATED / 8" | sed -e 's/^ *//g')d"
}

function print_est_report() {

  SIMPLE_STD_DEVIATION=$( wcalc -q "($WORST_CASE_SUM - $BEST_CASE_SUM) / $DEVIATION_DIVISOR" )
  COMPLEX_STD_DEVIATION=$( wcalc -q "sqrt($TASK_VARIANCE_SUM)")

#  echo "WORST_CASE_SUM: $WORST_CASE_SUM"
#  echo "BEST_CASE_SUM: $BEST_CASE_SUM"
#  echo "TASK_VARIANCE_SUM: $TASK_VARIANCE_SUM"

  echo "-------------------------------------------"
  echo "SIMPLE_STD_DEVIATION: $SIMPLE_STD_DEVIATION"
  echo "COMPLEX_STD_DEVIATION: $COMPLEX_STD_DEVIATION"

  echo "-------------------------------------------"
  echo -n "Spent:        "
  echo "${SPENT_SUM}h $(wcalc -q -P1 "$SPENT_SUM / 8" | sed -e 's/^ *//g')d"
  echo -n "Spent no est: "
  echo "${SPENT_UNTRACKED_SUM}h $(wcalc -q -P1 "$SPENT_UNTRACKED_SUM / 8" | sed -e 's/^ *//g')d"
  echo -n "Spent sum:    "
  echo "$(wcalc -q -P1 "$SPENT_SUM + $SPENT_UNTRACKED_SUM" | sed -e 's/^ *//g')h $(wcalc -q -P1 "($SPENT_SUM + $SPENT_UNTRACKED_SUM )/ 8" | sed -e 's/^ *//g')d"

  if [ "$EXPECTED_ESTIMATED_SUM" != "0.0" ] && [ "$EXPECTED_PERT_SUM" != "0.0" ] && [ "$EXPECTED_PERT2_SUM" != "0.0" ] ; then

    FACTOR10="-1.28"
    FACTOR25="-0.67"
    FACTOR50="0.0"
    FACTOR75="0.67"
    FACTOR90="1.28"
    echo -n "Likely:"
    echo -n " 25%:("
    echo -n "$(showExpected $EXPECTED_ESTIMATED_SUM $COMPLEX_STD_DEVIATION $FACTOR25)"
    echo -n ")"
    echo -n " 50%:("
    echo -n "$(showExpected $EXPECTED_ESTIMATED_SUM $COMPLEX_STD_DEVIATION $FACTOR50)"
    echo -n ")"
    echo -n " 75%:("
    echo -n "$(showExpected $EXPECTED_ESTIMATED_SUM $COMPLEX_STD_DEVIATION $FACTOR75)"
    echo -n ")"
    echo

    echo -n "Pert:  "
    echo -n " 25%:("
    echo -n "$(showExpected $EXPECTED_PERT_SUM $COMPLEX_STD_DEVIATION $FACTOR25)"
    echo -n ")"
    echo -n " 50%:("
    echo -n "$(showExpected $EXPECTED_PERT_SUM $COMPLEX_STD_DEVIATION $FACTOR50)"
    echo -n ")"
    echo -n " 75%:("
    echo -n "$(showExpected $EXPECTED_PERT_SUM $COMPLEX_STD_DEVIATION $FACTOR75)"
    echo -n ")"
    echo

    echo -n "Pert2: "
    echo -n " 25%:("
    echo -n "$(showExpected $EXPECTED_PERT2_SUM $COMPLEX_STD_DEVIATION $FACTOR25)"
    echo -n ")"
    echo -n " 50%:("
    echo -n "$(showExpected $EXPECTED_PERT2_SUM $COMPLEX_STD_DEVIATION $FACTOR50)"
    echo -n ")"
    echo -n " 75%:("
    echo -n "$(showExpected $EXPECTED_PERT2_SUM $COMPLEX_STD_DEVIATION $FACTOR75)"
    echo -n ")"
    echo

    echo -n "Pert2: "
    echo -n " 10%:("
    echo -n "$(showExpected $EXPECTED_PERT2_SUM $COMPLEX_STD_DEVIATION $FACTOR10)"
    echo -n ")"
    echo -n " 50%:("
    echo -n "$(showExpected $EXPECTED_PERT2_SUM $COMPLEX_STD_DEVIATION $FACTOR50)"
    echo -n ")"
    echo -n " 90%:("
    echo -n "$(showExpected $EXPECTED_PERT2_SUM $COMPLEX_STD_DEVIATION $FACTOR90)"
    echo -n ")"
    echo
  fi
}

function print_est() {
  local JSON="$1"
  local LEADING_SPACES="$2"
  print_default "$JSON" "$LEADING_SPACES" | tr -d '\n'
  echo

  BEST=$(echo "$JSON" | jq -r '.cjson.est[0]?//""')
  LIKELY=$(echo "$JSON" | jq -r '.cjson.est[1]?//""')
  WORST=$(echo "$JSON" | jq -r '.cjson.est[2]?//""')
  ACTUAL=$(echo "$JSON" | jq -r '.spent_hours//""')

  if [ -n "$BEST" ] && [ -n "$LIKELY" ] && [ -n "$WORST" ];then
    echo -n "$LEADING_SPACES"

    echo -n "$CHILD_LEADING_SPACES"

    echo -n "[$BEST:$LIKELY:$WORST]"

    PERT=$(wcalc -q -P1 "($BEST + ( 4 * $LIKELY) + (1 * $WORST)) / 6 "| sed -e 's/^ *//g')
    echo -n " pert:$PERT"
    PERT2=$(wcalc -q -P1 "($BEST + ( 3 * $LIKELY) + (2 * $WORST)) / 6 "| sed -e 's/^ *//g')
    echo -n " pert2:$PERT2"

    EXPECTED_ESTIMATED_SUM=$( wcalc -q "$EXPECTED_ESTIMATED_SUM + $LIKELY" | sed -e 's/^ *//g')
    EXPECTED_PERT_SUM=$( wcalc -q "$EXPECTED_ESTIMATED_SUM + $PERT" | sed -e 's/^ *//g')
    EXPECTED_PERT2_SUM=$( wcalc -q "$EXPECTED_ESTIMATED_SUM + $PERT2" | sed -e 's/^ *//g')

    WORST_CASE_SUM=$( wcalc -q "$WORST_CASE_SUM + $WORST" | sed -e 's/^ *//g')
    BEST_CASE_SUM=$( wcalc -q "$BEST_CASE_SUM + $BEST" | sed -e 's/^ *//g')
    TASK_STD_DEVIATION=$( wcalc -q "($WORST - $BEST) / $DEVIATION_DIVISOR"| sed -e 's/^ *//g')
    TASK_VARIANCE=$( wcalc -q "$TASK_STD_DEVIATION^2"| sed -e 's/^ *//g')
    TASK_VARIANCE_SUM=$(wcalc -q "$TASK_VARIANCE_SUM + $TASK_VARIANCE"| sed -e 's/^ *//g')

    if [ -n "$ACTUAL" ] && [ "$ACTUAL" != "0" ];then 
#MRE = ( ActualResult - EstimatedResult) / ActualResult
      MRE=$(wcalc -q -P0 "100 * ( $ACTUAL - $LIKELY) / $ACTUAL"| sed -e 's/^ *//g')
      echo -n " mre:$MRE%"
      SPENT_SUM=$( wcalc -q "$SPENT_SUM + $ACTUAL" | sed -e 's/^ *//g')
    fi
    echo
  else
    if [ -n "$ACTUAL" ] && [ "$ACTUAL" != "0" ];then 
      SPENT_UNTRACKED_SUM=$( wcalc -q "$SPENT_UNTRACKED_SUM + $ACTUAL" | sed -e 's/^ *//g')
    fi
  fi

}

function print_desc() {
  local JSON="$1"
  local LEADING_SPACES="$2"
  print_default "$JSON" "$LEADING_SPACES" | tr -d '\n'

  RELEASE_NAME="$(echo "$JSON" | jq -r '.release.release.name//""')"
  if [ -n "$RELEASE_NAME" ];then
    echo
    RELEASE_ID="$(echo "$JSON" | jq -r '.release.release.id//""')"
    echo "$RELEASE_NAME [$RELEASE_ID]" \
    | sed -e "s/^/${LEADING_SPACES}${CHILD_LEADING_SPACES}${CHILD_LEADING_SPACES}/g" \
    | sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g"
  else
    echo
  fi

  DESCRIPTION="$(echo "$JSON" | jq -r '.description//""')"
  if [ -n "$DESCRIPTION" ];then
    echo "$DESCRIPTION" \
    | sed '/@[^:]*:/d' \
    | sed -e "s/^/${LEADING_SPACES}${CHILD_LEADING_SPACES}${CHILD_LEADING_SPACES}/g" \
    | sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g"
  fi

  NOTES="$(echo "$JSON" | jq -c "\
if (.journals != null) then \
[.journals[] | select(.notes != \"\") | { a: .user.name, b: .notes } ] \
else [] end \
")"
  if [ "$NOTES" != "[]" ];then
    echo "$( echo "$NOTES" |\
    jq ".[] | \"${LEADING_SPACES}${CHILD_LEADING_SPACES}${CHILD_LEADING_SPACES}\
note: \(.a): \(.b)\" "\
    |sed -e 's/^"//g' -e 's/"$//g'\
    |sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g"\
    )"
  fi

}

SHOW_ANY_CHILDREN=0

function print_default() {
  local JSON="$1"
  local LEADING_SPACES="$2"
  #local FEATURE=$(echo "$JSON" | jq -r 'if .tracker_name == "Feature" then 1 else 0 end')
  #TODO: replace fixed issue tracker id with variable
  #local FEATURE=$(echo "$JSON" | jq -r 'if .tracker.id == 4 then 1 else 0 end')
  local TASK=$(echo "$JSON" | jq -r 'if .tracker.name == "Task" then 1 else 0 end')
  if [ "$TASK" -eq 1 ]; then
    LINE="$(echo "$JSON" |\
    jq -r \
"\"$LEADING_SPACES\
\(.id)\
 [\
\(.estimated_hours//\"-\")\
]\
\(if (.cjson.est!= null) then \"\(.cjson.est)\" else \"\" end)\
\(if (.spent_hours!= null) then \":[\(.spent_hours)]\" else \"\" end)\
 \(.status.name)\
\(if ( (.cjson.tags != null) and ((.cjson.tags|length) > 0) ) then \" (\(.cjson.tags|join(\",\")))\" else \"\" end )\
\(if (.category.name!=null) then \" (\(.category.name))\" else \"\" end)\
\(if (.assigned_to.name!=null) then \" \(.assigned_to.name):\" else \"\" end)\
 \\\"\(.subject)\\\"\
\"" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"

    #local STATUS_IN_WORK=$(echo "$JSON" | jq -r 'if .status.id == 2 then 1 else 0 end')
    #if [ "$STATUS_IN_WORK" -eq 1 ]; then
    #echo ">>>>>>>>>>>>$(echo "$JSON" | jq -r '.status.id')"
    if [ "$(echo "$JSON" | jq -r 'if .status.id == 2 then 1 else 0 end')" = "1" ];then
      tput bold
      tput setaf 2
      echo "$LINE"
      tput sgr0
    elif [ "$(echo "$JSON" | jq -r 'if ((.status.id == 5)or(.status.id==6)) then 1 else 0 end')" = "1" ];then
      tput bold
      tput setaf 1
      echo "$LINE"
      tput sgr0
    else
      tput bold
      tput setaf 6
      echo "$LINE"
      tput sgr0
    fi
  #elif [ "$FEATURE" -eq 1 ]; then
  else
    LINE="$(echo "$JSON" |\
    jq -r \
"\"$LEADING_SPACES\
\(.id)\
 [\(.story_points//\"\"):\(.estimated_hours//\"\"):\(.done_ratio//\"-\")%]\
 \(.status.name)\
 \(.tracker.name)\
\(if ( (.cjson.tags != null) and ((.cjson.tags|length) > 0) ) then \" (\(.cjson.tags|join(\",\")))\" else \"\" end )\
\(if (.category.name!=null) then \" (\(.category.name))\" else \"\" end)\
\(if (.assigned_to.name!=null) then \" \(.assigned_to.name):\" else \"\" end)\
 \\\"\(.subject)\\\"\
\"" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g")"

    tput setaf 5
    echo "$LINE"
    tput sgr0

  fi
}

function print_children_by_their_parent_id(){
  local IDS="$1"
  local PRINT_COMMAND="$2"
  local LEADING_SPACES="$3"

  if [ "$SHOW_ANY_CHILDREN" -eq 1 ]; then
    local TASKS="$ALL_TASKS_JSON"
  else
    local TASKS="$FILTERED_TASKS"
  fi

  if [ -z "$IDS" ]; then
      for ID in $(echo "$FILTERED_TASKS" | jq '.[]|.id');do
          PARENT_ID=$(echo "$FILTERED_TASKS" | jq -r ".[]|select(.id==$ID)|.parent.id//\"\"")
          if [ -n "$PARENT_ID" ]; then
              PARENT=$(echo "$FILTERED_TASKS" | jq -r ".[]|select(.id==$PARENT_ID)|.id")
              if [ -z "$PARENT" ];then
                  IDS+="{\"id\":$ID}"
              fi
          else
            IDS+="{\"id\":$ID}"
          fi
      done
      IDS=$(echo "$IDS" | jq -s -c '.')
  fi

  for ID in $(ids_from_json_array "$IDS"); do
    JSON="$(echo "$TASKS" | jq -r ".[]| select(.id==$ID)")"
    $PRINT_COMMAND "$JSON" "$LEADING_SPACES"
    for CHILD_JSON in $( echo "$TASKS" | jq -c "map(select((.parent!=null) and(.parent.id==$ID) ))|.[]" ); do
      CHILD_ID=$(echo "$CHILD_JSON" | jq -c '[{id:.id}]')
      print_children_by_their_parent_id "$CHILD_ID" "$PRINT_COMMAND" "$LEADING_SPACES$CHILD_LEADING_SPACES" 
    done
  done
}

while true;do
  if [ "$#" -ge 1 ]; then

    if [ "$1" = "any" ]; then
      shift
      SHOW_ANY_CHILDREN=1

    elif [ "$1" = "lines" ]; then
      shift
      print_children_by_their_parent_id "" print_default

    elif [ "$1" = "lines:desc" ]; then
      shift
      print_children_by_their_parent_id "" print_desc

    elif [ $(echo "$1" | grep "lines:[a-zA-Z0-9_-]*") ]; then
      PRINT_COMMAND=$(echo "$1" | sed 's/^lines://g')
      shift
      if [ -z "$PRINT_COMMAND" ]; then
        PRINT_COMMAND="print_desc"
      fi
      print_children_by_their_parent_id "" "$PRINT_COMMAND"

    elif [ "$1" = "report_estimates" ]; then
      shift
      TOTAL_HOURS="0 "
      for TASK_JSON in $( echo "$FILTERED_TASKS" | jq -c '.[]' ); do
        HOURS=$(echo "$TASK_JSON" | jq '.estimated_hours//0')
        TOTAL_HOURS+=" + $HOURS"
      done
      TOTAL_HOURS=$( echo "$TOTAL_HOURS" | bc )
      echo "    :[$TOTAL_HOURS]"

    elif [ $(echo "$1" | grep "^report$") ]; then
      shift
      #TOTAL_ESTIMATED=$(echo "$FILTERED_TASKS" | jq '[.[] | .estimated_hours] | add')
      #TOTAL_ESTIMATED=$(echo "$FILTERED_TASKS" | jq -c '[.[] | .estimated_hours]')
      #echo "total estimated hours: $TOTAL_ESTIMATED"
      TOTAL_HOURS="0 "
      TOTAL_HOURS_WITH_FACTOR="0 "
      for TASK_JSON in $( echo "$FILTERED_TASKS" | jq -c '.[]' ); do
        ID=$(echo "$TASK_JSON" | jq '.id')
        HOURS=$(echo "$TASK_JSON" | jq '.estimated_hours//0')
        COMPLEXITY=$(echo "$TASK_JSON" | jq '.cjson.complexity//0')
        INNOVATION=$(echo "$TASK_JSON" | jq '.cjson.innovation//0')
        PAIRING=$(echo "$TASK_JSON" | jq '.cjson.pairing//0')

        #echo "------------------------------"
        #echo "HOURS:>$HOURS<"
        #echo "COMPLEXITY:>$COMPLEXITY<"
        #echo "INNOVATION:>$INNOVATION<"
        #echo "PAIRING:>$PAIRING<"

        PAIRING_FACTOR=$( echo "1 + $PAIRING / 2" | bc -ql)
        #echo "PAIRING_FACTOR:>$PAIRING_FACTOR<"
        RISK_SELECTOR=$(( COMPLEXITY * 3 + INNOVATION ))
        #echo "RISK_SELECTOR:>$RISK_SELECTOR<"

        RISK_TABLE="[1.1637223975, 1.1980530973, 1.9808695652, 1.5203299941, 1.5320987654, 1.8945454545, 1.7795275591, 1.3245614035, 2.3448275862]"
        #RISK_TABLE="[10,20,30,40,50,60,70,80,90]"
        RISK_FACTOR=$(echo "$RISK_TABLE" | jq -r -c ".[$RISK_SELECTOR]")
        #echo "RISK_FACTOR:>$RISK_FACTOR<"

        FINAL_HOURS=$( echo "scale=2; $RISK_FACTOR * $PAIRING_FACTOR * $HOURS" | bc -ql)
        #echo "FINAL_HOURS:>$FINAL_HOURS<"

        FINAL_HOURS_SHORT=$(printf "%0.1f\n" $FINAL_HOURS)
        #echo "FINAL_HOURS_SHORT:>$FINAL_HOURS_SHORT<"
        echo "$ID: ($HOURS) : $FINAL_HOURS_SHORT"
        TOTAL_HOURS+=" + $HOURS"
        TOTAL_HOURS_WITH_FACTOR+=" + $FINAL_HOURS_SHORT"
      done

      TOTAL_HOURS=$( echo "$TOTAL_HOURS" | bc )
      TOTAL_HOURS_WITH_FACTOR=$( echo "$TOTAL_HOURS_WITH_FACTOR" | bc )
      #echo "TOTAL_HOURS:>$TOTAL_HOURS<"
      #echo "TOTAL_HOURS_WITH_FACTOR:>$TOTAL_HOURS_WITH_FACTOR<"

      echo "    : ($TOTAL_HOURS) :$TOTAL_HOURS_WITH_FACTOR"

    elif [ $(echo "$1" | grep "^report:short$") ]; then
      shift
      #TOTAL_ESTIMATED=$(echo "$FILTERED_TASKS" | jq '[.[] | .estimated_hours] | add')
      #TOTAL_ESTIMATED=$(echo "$FILTERED_TASKS" | jq -c '[.[] | .estimated_hours]')
      #echo "total estimated hours: $TOTAL_ESTIMATED"
      TOTAL_HOURS="0 "
      TOTAL_HOURS_WITH_FACTOR="0 "
      for TASK_JSON in $( echo "$FILTERED_TASKS" | jq -c '.[]' ); do
        ID=$(echo "$TASK_JSON" | jq '.id')
        HOURS=$(echo "$TASK_JSON" | jq '.estimated_hours//0')
        COMPLEXITY=$(echo "$TASK_JSON" | jq '.cjson.complexity//0')
        INNOVATION=$(echo "$TASK_JSON" | jq '.cjson.innovation//0')
        PAIRING=$(echo "$TASK_JSON" | jq '.cjson.pairing//0')

        #echo "------------------------------"
        #echo "HOURS:>$HOURS<"
        #echo "COMPLEXITY:>$COMPLEXITY<"
        #echo "INNOVATION:>$INNOVATION<"
        #echo "PAIRING:>$PAIRING<"

        PAIRING_FACTOR=$( echo "1 + $PAIRING / 2" | bc -ql)
        #echo "PAIRING_FACTOR:>$PAIRING_FACTOR<"
        RISK_SELECTOR=$(( COMPLEXITY * 3 + INNOVATION ))
        #echo "RISK_SELECTOR:>$RISK_SELECTOR<"

        RISK_TABLE="[1.1637223975, 1.1980530973, 1.9808695652, 1.5203299941, 1.5320987654, 1.8945454545, 1.7795275591, 1.3245614035, 2.3448275862]"
        #RISK_TABLE="[10,20,30,40,50,60,70,80,90]"
        RISK_FACTOR=$(echo "$RISK_TABLE" | jq -r -c ".[$RISK_SELECTOR]")
        #echo "RISK_FACTOR:>$RISK_FACTOR<"

        FINAL_HOURS=$( echo "scale=2; $RISK_FACTOR * $PAIRING_FACTOR * $HOURS" | bc -ql)
        #echo "FINAL_HOURS:>$FINAL_HOURS<"

        FINAL_HOURS_SHORT=$(printf "%0.1f\n" $FINAL_HOURS)
        #echo "FINAL_HOURS_SHORT:>$FINAL_HOURS_SHORT<"
        #echo "$ID: ($HOURS) : $FINAL_HOURS_SHORT"
        TOTAL_HOURS+=" + $HOURS"
        TOTAL_HOURS_WITH_FACTOR+=" + $FINAL_HOURS_SHORT"
      done

      TOTAL_HOURS=$( echo "$TOTAL_HOURS" | bc )
      TOTAL_HOURS_WITH_FACTOR=$( echo "$TOTAL_HOURS_WITH_FACTOR" | bc )
      #echo "TOTAL_HOURS:>$TOTAL_HOURS<"
      #echo "TOTAL_HOURS_WITH_FACTOR:>$TOTAL_HOURS_WITH_FACTOR<"

      echo "    : ($TOTAL_HOURS) :$TOTAL_HOURS_WITH_FACTOR"

    elif [ "$1" = "pretty" ]; then
      shift
      echo "$FILTERED_TASKS" | jq '.'

    elif [ "$1" = "json" ]; then
      shift
      echo "$FILTERED_TASKS"

    elif [ "$1" = "ids" ]; then
      shift
      echo "$IDS"

    elif [ "$1" = "csids" ]; then
      shift
      COMMA_SEPARATED_IDS=""
      for ID in $IDS; do
        if [ -z "$COMMA_SEPARATED_IDS" ];then
          COMMA_SEPARATED_IDS="$ID"
        else
          COMMA_SEPARATED_IDS+=",$ID"
        fi
      done
      echo "$COMMA_SEPARATED_IDS"

    elif [ $(echo "$1" | grep "print:[a-zA-Z0-9_-]\{1,\}") ]; then
      VARIABLE_NAME=$(echo "$1" | sed 's/^print://g')
      shift
      eval $VARIABLE_NAME

    else
      break
    fi
  else
    break
  fi
done


