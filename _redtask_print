#!/bin/bash

function task_line_from_json(){
    : ${SPACES:=''}
    if [ "${EXTENDED}" == "1" ]; then
      # TODO: when the description contains new lines ('\r\n')
      #       the result is strange
      jq -r -c "(if type == \"array\" then .[] else . end |\
\"${SPACES}\(.id): [\(.spent_hours//\"!\")-\(.remaining_hours//\"!\")-\(.estimated_hours//\"!\")] \(.status_name) [\(.assigned_to_name)] : \(.subject) - \(.parent_id//\"\") \
\(.fixed_version_name) \
\(if (.description != null) and (.description != \"\") then (\"\n${SPACES}    \(.description)\") else \"\" end) \
\(if (.notes | length) > 0 then ([.notes[] |\"\n${SPACES}    note: \(.notes)\"]| add ) else \"\" end) \
\"\
      )"
#\"${SPACES}\(.id): [\(.spent_hours//\"!\")-\(.remaining_hours//\"!\")-\(.estimated_hours//\"!\")] \(.status_name) [\(.assigned_to_name)] : \(.subject) - \(.parent_id) \(. fixed_version_name//\"\")\"\
    else
      echo "$1" | jq -r "(if type == \"array\" then .[] else . end |\
\"${SPACES}\(.id): [\(.spent_hours//\"!\")-\(.remaining_hours//\"!\")-\(.estimated_hours//\"!\")] \(.status_name) [\(.assigned_to_name)] : '\(.subject)'\"\
      )"
    fi
}

function json_line_print(){
  JSON="$1"
  local LEADING_SPACES="$2"

  echo "$JSON" | jq -r "\"${LEADING_SPACES}\(.id) \(.subject) \(.status_name//\"\")\""
  CHILD_TASKS="$(echo "$JSON" | jq -r -c 'if has("children") then .children[] else "" end')"
  if [ -n "$CHILD_TASKS" ];then
    OLD_IFS="$IFS"
    IFS=$'\n'
    IFS=${IFS:0:1}
    ALL_CHILD_JSONS=(${CHILD_TASKS})
    IFS=$OLD_IFS
    for CHILD_JSON in "${ALL_CHILD_JSONS[@]}"; do
      json_line_print "$CHILD_JSON" "$LEADING_SPACES    "
    done
  fi
}

if [ "$#" -ge 1 ]; then
  if [ "$1" = "lines" ]; then
    shift
    load_json_content_of_ids
    TASK_JSON_LINES="$(echo "$ALL_TASKS_JSON" | jq -c '.[]')"

    OLD_IFS="$IFS"
    IFS=$'\n'
    IFS=${IFS:0:1}
    TASK_JSONS=(${TASK_JSON_LINES})
    IFS=$OLD_IFS

    for TASK_JSON in "${TASK_JSONS[@]}"; do
      json_line_print "$TASK_JSON"
    done

  elif [ "$1" = "pretty" ]; then
    shift
    load_json_content_of_ids
    echo "$ALL_TASKS_JSON" | jq '.'

  elif [ "$1" = "json" ]; then
    shift
    load_json_content_of_ids
    echo "$ALL_TASKS_JSON"

  elif [ "$1" = "ids" ]; then
    shift
    echo "$IDS"
  fi
else
  echo "$IDS"
fi

