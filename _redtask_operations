#!/bin/bash

MODIFIER=""
MODIFICATION_VALUES=()
CUSTOM_JSON_MODIFIER=""

if [ "$#" -ge 1 ]; then
  if [ "$1" = "mo" ]; then
    shift
    MODIFIER="mo"

  elif [ "$1" = "add" ]; then
    shift
    MODIFIER="add"
    MODIFICATION_VALUES+=("'project_id':$PROJECT_ID")
    if [ -n "$IDS" ] && [ "$(wc -l <<<"$IDS")" -eq 1 ];then
      MODIFICATION_VALUES+=("'parent_issue_id':$IDS")
    elif [ -n "$IDS" ];then
      echo "cannot set multiple parents for an issue!" 1>&2
      MODIFIER=""
    fi

  elif [ "$1" = "closed" ]; then
    shift
    for ID in $IDS; do
      write_issue $ID "'status_id':'$STATUS_CLOSED'"
    done

  elif [ "$1" = "resolved" ]; then
    shift
    for ID in $IDS; do
      write_issue $ID "'status_id':'$STATUS_RESOLVED'"
    done

  elif [ "$1" = "reject" ]; then
    shift
    for ID in $IDS; do
      write_issue $ID "'status_id':'6'"
    done

  elif [ "$1" = "blocked" ]; then
    shift
    for ID in $IDS; do
      write_issue $ID "'status_id':'4'"
    done

  elif [ "$1" = "new" ]; then
    shift
    for ID in $IDS; do
      write_issue $ID "'status_id':'$STATUS_NEW'"
    done

  elif [ "$1" = "doing" ]; then
    shift
    for ID in $IDS; do
      write_issue $ID "'status_id':'$STATUS_DOING'"
    done

  elif [ "$1" = "delete" ]; then
    shift
    load_json_content_of_ids
    echo "delete ?:"
    for ID in $IDS; do
      JSON="$(echo "$FILTERED_TASKS" | jq -r ".[]| select(.id==$ID)")"
      echo -n "$ID:$(echo "$JSON" | jq -r '.subject')"
      read -p "   [y|n]" -n 1 -r CONFIRM
      echo
      if [[ "$CONFIRM" =~ ^(y|Y)$ ]]; then
        curl -X DELETE -s "https://$SERVER/issues/$ID.json?key=$KEY"
      fi
    done

  elif [ "$1" = "estimate_to_remaining" ]; then
    shift
    load_json_content_of_ids
    for ID in $IDS; do
      JSON="$(echo "$FILTERED_TASKS" | jq -r ".[]| select(.id==$ID)")"
      ESTIMATED_HOURS="$(echo "$JSON" | jq -r '.estimated_hours')"
      #echo "$ID:>$ESTIMATED_HOURS<"
      write_issue $ID "'remaining_hours':$ESTIMATED_HOURS"
    done

  elif [ "$1" = "edit:subject" ]; then
    shift
    load_json_content_of_ids
    for ID in $IDS; do
      JSON="$(echo "$FILTERED_TASKS" | jq -r ".[]| select(.id==$ID)")"
      OLD_SUBJECT="$(echo "$JSON" | jq -r '.subject')"
      NEW_SUBJECT="$(echo "$OLD_SUBJECT" | EDITOR="vim -u NONE" vipe)"
      write_issue $ID "'subject':'$NEW_SUBJECT'"
    done

  elif [ "$1" = "edit:description" ]; then
    shift
    load_json_content_of_ids
    for ID in $IDS; do
      JSON="$(echo "$FILTERED_TASKS" | jq -r ".[]| select(.id==$ID)")"
      OLD_DESCRIPTION="$(echo "$JSON" | jq -r '.description//""')"
      NEW_DESCRIPTION="$(echo "$OLD_DESCRIPTION" | perl -p -e 's/\r//g'| EDITOR="vim -u NONE" vipe)"
      NEW_DESCRIPTION="$(echo "$NEW_DESCRIPTION" | sed -e "s/'//g" -e 's/"/\\"/g')"
      write_issue $ID "'description':'$NEW_DESCRIPTION'"
    done

  elif [ "$1" = "deliver_edit" ]; then
    shift
    load_json_content_of_ids
    for ID in $IDS; do
      JSON="$(echo "$FILTERED_TASKS" | jq -r ".[]| select(.id==$ID)")"
      OLD_DELIVERABLE="$(echo "$JSON" | jq -r '.cjson.deliverable//""')"
      NEW_DELIVERABLE="$(echo "$OLD_DELIVERABLE" | EDITOR="vim -u NONE" vipe)"
      LOCAL_CUSTOM_JSON_MODIFIER=".deliverable=\"$NEW_DELIVERABLE\""
      LOCAL_FINAL_MODIFICATION_STRING="$(modifier_string_for_custom_json "$JSON" "$LOCAL_CUSTOM_JSON_MODIFIER")"
      write_issue $ID "$LOCAL_FINAL_MODIFICATION_STRING"
    done

  elif [ "$1" = "require_edit" ]; then
    shift
    load_json_content_of_ids
    for ID in $IDS; do
      JSON="$(echo "$FILTERED_TASKS" | jq -r ".[]| select(.id==$ID)")"
      OLD_DELIVERABLE="$(echo "$JSON" | jq -r '.cjson.requirements//""')"
      NEW_DELIVERABLE="$(echo "$OLD_DELIVERABLE" | EDITOR="vim -u NONE" vipe)"
      LOCAL_CUSTOM_JSON_MODIFIER=".requirements=\"$NEW_DELIVERABLE\""
      LOCAL_FINAL_MODIFICATION_STRING="$(modifier_string_for_custom_json "$JSON" "$LOCAL_CUSTOM_JSON_MODIFIER")"
      write_issue $ID "$LOCAL_FINAL_MODIFICATION_STRING"
    done

  fi

  if [ -n "$MODIFIER" ];then

    while true;do
      if [ "$#" -ge 1 ]; then

        if [ "$1" = "append" ]; then
          shift
          APPEND=1

        elif [ "$1" = "bug" ]; then
          shift
          #TODO: delete old tracker id of MODIFICATION_VALUES
          MODIFICATION_VALUES+=("'tracker_id':1")

        elif [ "$1" = "task" ]; then
          shift
          #TODO: delete old tracker id of MODIFICATION_VALUES
          MODIFICATION_VALUES+=("'tracker_id':4")

        elif [ "$1" = "feature" ]; then
          shift
          #TODO: delete old tracker id of MODIFICATION_VALUES
          MODIFICATION_VALUES+=("'tracker_id':2")

        elif [ $(echo "$1" | grep "^total:[0-9]*$") ]; then
          TOTAL_TIME=$(echo "$1" | sed 's/^total://g')
          if [ -z "$TOTAL_TIME" ];then
            TOTAL_TIME="null"
          fi
          shift
          MODIFICATION_VALUES+=("'remaining_hours':$TOTAL_TIME")
          MODIFICATION_VALUES+=("'estimated_hours':$TOTAL_TIME")

        elif [ "$(echo "$1" | grep "\<note:.*")" ]; then
          NOTE_STRING="$(echo "$1" | sed -e 's/^note://g')"
          shift
          MODIFICATION_VALUES+=("'notes':'$NOTE_STRING'")

        elif [ $(echo "$1" | grep "\<remaining:[0-9]*\>") ]; then
          REMAINING_HOURS=$(echo "$1" | sed 's/^remaining://g')
          shift
          MODIFICATION_VALUES+=("'remaining_hours':$REMAINING_HOURS")

        elif [ $(echo "$1" | grep "\<points:[0-9]*\>") ]; then
          STORY_POINTS=$(echo "$1" | sed 's/^points://g')
          shift
          MODIFICATION_VALUES+=("'story_points':$STORY_POINTS")

        elif [ $(echo "$1" | grep "^\(estimate\|est\):[0-9]*\.\?[0-9]\+$") ]; then
          ESTIMATED_HOURS=$(echo "$1" | sed -E -e 's/^(estimate|est)://g')
          shift
          MODIFICATION_VALUES+=("'estimated_hours':$ESTIMATED_HOURS")

        elif [ "$1" = "unassign" ]; then
          shift
          MODIFICATION_VALUES+=("'assigned_to_id':null")

        elif [ $(echo "$1" | grep "^assign:[0-9]*$") ]; then
          OWNER=$(echo "$1" | sed 's/^assign://g')
          if [ -z "$OWNER" ];then
            OWNER="null"
          fi
          shift
          MODIFICATION_VALUES+=("'assigned_to_id':$OWNER")

        elif [ $(echo "$1" | grep "\<assign:[a-zA-Z0-9_-]*\>") ]; then
          USER_STRING="$(echo "$1" | sed 's/^assign://g')"
          shift
          MATCHING_USER_ID="$(project_member_by_name $USER_STRING)"
          if [ -n "$MATCHING_USER_ID" ];then
            MODIFICATION_VALUES+=("'assigned_to_id':$MATCHING_USER_ID")
          else
            echo "no or more than one user with:'$USER_STRING' was found." 1>&2
          fi

        elif [ $(echo "$1" | grep "^category:[0-9]*$") ]; then
          CATEGORY_ID=$(echo "$1" | sed 's/^category://g')
          if [ -z "$CATEGORY_ID" ];then
            CATEGORY_ID="null"
          fi
          shift
          MODIFICATION_VALUES+=("'category_id':$CATEGORY_ID")

        elif [ $(echo "$1" | grep "\<category:[a-zA-Z0-9_-]*\>") ]; then
          CATEGORY_STRING="$(echo "$1" | sed 's/^category://g')"
          shift
          MATCHING_CATEGORY_ID="$(category_by_name $CATEGORY_STRING)"
          if [ -n "$MATCHING_CATEGORY_ID" ];then
            MODIFICATION_VALUES+=("'category_id':$MATCHING_CATEGORY_ID")
          else
            echo "no or more than one id with:'$CATEGORY_STRING' was found." 1>&2
          fi

        elif [ $(echo "$1" | grep "\<version:[0-9]*$") ]; then
          VERSION=$(echo "$1" | sed 's/^version://g')
          shift
          if [ -z "$VERSION" ];then
            VERSION="null"
          fi
          MODIFICATION_VALUES+=("'fixed_version_id':$VERSION")

        elif [ $(echo "$1" | grep "\<parent:[0-9]*$") ]; then
          PARENT="$(echo "$1" | sed 's/^parent://g')"
          shift
          if [ -z "$PARENT" ];then
            PARENT="null"
          fi
          #TODO: what if parent is already defined
          MODIFICATION_VALUES+=("'parent_issue_id':$PARENT")

        elif [ $(echo "$1" | grep "\<version:[a-zA-Z0-9_-]*\>") ]; then
          VERSION_STRING="$(echo "$1" | sed 's/^version://g')"
          shift
          MATCHING_VERSION_ID="$(version_by_name $VERSION_STRING)"
          if [ -n "$MATCHING_VERSION_ID" ];then
            MODIFICATION_VALUES+=("'fixed_version_id':$MATCHING_VERSION_ID")
          else
            echo "no or more than one id with:'$VERSION_STRING' was found." 1>&2
          fi

        elif [ $(echo "$1" | grep "\<release:[0-9]*\>") ]; then
          RELEASE_ID="$(echo "$1" | sed 's/^release://g')"
          shift
          MODIFICATION_VALUES+=("'release_id':$RELEASE_ID")

        #TODO: elif [ "$(echo "$1" | grep "\<subject+:.*")" ]; then
        elif [ "$(echo "$1" | grep "\<subject:.*")" ]; then
          SUBJECT_STRING="$(echo "$1" | sed -e 's/^subject://g')"
          shift
          MODIFICATION_VALUES+=("'subject':'$SUBJECT_STRING'")

        #elif [ "$(echo "$1" | grep "\<deliverable:.*")" ]; then
        #  STRING="$(echo "$1" | sed -e 's/^deliverable://g')"
        elif [ "$(echo "$1" | grep "\<deliver:.*")" ]; then
          STRING="$(echo "$1" | sed -e 's/^deliver://g')"
          shift
          if [ -n "$CUSTOM_JSON_MODIFIER" ];then
            CUSTOM_JSON_MODIFIER+="|"
          fi
          CUSTOM_JSON_MODIFIER+=".deliverable=\"$STRING\""

        elif [ "$(echo "$1" | grep "\<require:.*")" ]; then
          STRING="$(echo "$1" | sed -e 's/^require://g')"
          shift
          if [ -n "$CUSTOM_JSON_MODIFIER" ];then
            CUSTOM_JSON_MODIFIER+="|"
          fi
          CUSTOM_JSON_MODIFIER+=".requirements=\"$STRING\""

        elif [ $(echo "$1" | grep "\<pair:[0-9]*\>") ]; then
          VALUE="$(echo "$1" | sed 's/^pair://g')"
          shift
          if [ -n "$CUSTOM_JSON_MODIFIER" ];then
            CUSTOM_JSON_MODIFIER+="|"
          fi
          CUSTOM_JSON_MODIFIER+=".pairing=$VALUE"

        elif [ $(echo "$1" | grep "^clx:[0-9]*$") ]; then
          VALUE="$(echo "$1" | sed 's/^clx://g')"
          shift
          if [ -n "$CUSTOM_JSON_MODIFIER" ];then
            CUSTOM_JSON_MODIFIER+="|"
          fi
          CUSTOM_JSON_MODIFIER+=".complexity=$VALUE"

        elif [ $(echo "$1" | grep "^ino:[0-9]*$") ]; then
          VALUE="$(echo "$1" | sed 's/^ino://g')"
          shift
          if [ -n "$CUSTOM_JSON_MODIFIER" ];then
            CUSTOM_JSON_MODIFIER+="|"
          fi
          CUSTOM_JSON_MODIFIER+=".innovation=$VALUE"

        elif [ "$(echo "$1" | grep "\+[a-zA-Z_][a-zA-Z0-9_-]*")" ]; then
          TAG="$(echo "$1" | sed -e 's/^+//g')"
          shift
          if [ -n "$CUSTOM_JSON_MODIFIER" ];then
            CUSTOM_JSON_MODIFIER+="|"
          fi
          CUSTOM_JSON_MODIFIER+=".tags+=[\"$TAG\"]"

        elif [ "$(echo "$1" | grep "\-[a-zA-Z_][a-zA-Z0-9_-]*")" ]; then
          TAG="$(echo "$1" | sed -e 's/^-//g')"
          shift
          if [ -n "$CUSTOM_JSON_MODIFIER" ];then
            CUSTOM_JSON_MODIFIER+="|"
          fi
          CUSTOM_JSON_MODIFIER+=".tags-=[\"$TAG\"]"

        elif [ "$(echo "$1" | grep "\<cjson:.*")" ]; then
          VALUE_ARGUMENT="$(echo "$1" | sed -e 's/^cjson://g')"
          shift
          #redtask 3277 cjson '.tags+=["hi"]'
          #redtask 3277 cjson '.+{"c":4}'
          #redtask 3277 cjson '.b=5'
          if [ -n "$CUSTOM_JSON_MODIFIER" ];then
            CUSTOM_JSON_MODIFIER+="|"
          fi
          CUSTOM_JSON_MODIFIER+="$VALUE_ARGUMENT"

#        elif [ "$(echo "$1" | grep "\<key:[a-z]*:.*")" ]; then
#          KEY_NAME="$(echo "$1" | sed -e 's/^key:\([a-z]*\):.*$/\1/g')"
#          VALUE_ARGUMENT="$(echo "$1" | sed -e 's/^key:[a-z]*:\(.*\)$/\1/g')"
#          shift
#          #TODO: append will not work when applying to several ids
#          for ID in $IDS; do
#            if [ -n "$APPEND" ]; then
#              load_json_content_of_ids
#              OLD_VALUE="$(echo "$FILTERED_TASKS" | jq -r ".[]| select(.id==$ID)|.$KEY_NAME")"
#              NEW_VALUE="${OLD_VALUE} ${VALUE_ARGUMENT}"
#            else
#              NEW_VALUE="$VALUE_ARGUMENT"
#            fi
#            MODIFICATION_VALUES+=("'$KEY_NAME':'$NEW_VALUE'")
#          done

    #    elif [ "$1" = "json" ] && [ "$#" -ge 2 ]; then
    #      VALUE_ARGUMENT="$2"
    #      shift
    #      shift
    #      load_json_content_of_ids
    #
    #      for ID in $IDS
    #      do
    #        OLD_VALUE=$(echo "$FILTERED_TASKS" | jq -r ".[]| select(.id==$ID)|.description")
    #        if [ -n "$APPEND" ]; then
    #          if [ $(assert_json "$OLD_VALUE") ]; then
    #            #redtask 3126 des "{\\\"hi\\\":4}"
    #            # $2='.a="4" | .b=5'
    #            if [ -z "$OLD_VALUE" ];then
    #              #echo "old description was empty"
    #              OLD_VALUE="{}"
    #            fi
    #            NEW_VALUE=$(echo "$OLD_VALUE" | jq -c "$VALUE_ARGUMENT" | sed -e 's/"/\\\"/g')
    #            write_issue $ID "'description':'$NEW_VALUE'"
    #          else
    #            echo "old description was not a json content"
    #          fi
    #        else
    #          NEW_VALUE=$(echo "$VALUE_ARGUMENT" | sed -e 's/"/\\\"/g')
    #          write_issue $ID "'description':'$NEW_VALUE'"
    #        fi
    #      done

        else
          break
        fi
      else
        break
      fi
    done

    FINAL_MODIFICATION_STRING=""
    for I in "${MODIFICATION_VALUES[@]}"; do
      if [ -z "$FINAL_MODIFICATION_STRING" ];then
        FINAL_MODIFICATION_STRING="$I"
      else
        FINAL_MODIFICATION_STRING+=",$I"
      fi
    done

    case "$MODIFIER" in
      "mo")
        #echo "$FINAL_MODIFICATION_STRING"
        load_json_content_of_ids
        for ID in $IDS; do
          JSON=$(echo "$FILTERED_TASKS" | jq -r ".[]| select(.id==$ID)")
          LOCAL_FINAL_MODIFICATION_STRING="$FINAL_MODIFICATION_STRING"
          if [ -n "$CUSTOM_JSON_MODIFIER" ];then
            if [ -n "$LOCAL_FINAL_MODIFICATION_STRING" ];then
              LOCAL_FINAL_MODIFICATION_STRING+=","
            fi
            LOCAL_FINAL_MODIFICATION_STRING+="$(modifier_string_for_custom_json "$JSON" "$CUSTOM_JSON_MODIFIER")"
          fi
          write_issue $ID "$LOCAL_FINAL_MODIFICATION_STRING"
        done
        ;;

      "add")
        LOCAL_FINAL_MODIFICATION_STRING="$FINAL_MODIFICATION_STRING"
        if [ -n "$CUSTOM_JSON_MODIFIER" ];then
          if [ -n "$LOCAL_FINAL_MODIFICATION_STRING" ];then
            LOCAL_FINAL_MODIFICATION_STRING+=","
          fi
          LOCAL_FINAL_MODIFICATION_STRING+="$(modifier_string_for_custom_json "{}" "$CUSTOM_JSON_MODIFIER")"
        fi
        echo "$LOCAL_FINAL_MODIFICATION_STRING" |\
        sed -e "s/^/{'issue':{/g" -e "s/$/}}/g" -e "s/'/\"/g" |\
        curl -X POST -H "Content-type:application/json" -s -d @- "https://$SERVER/issues.json?key=$KEY" |\
        jq '.issue.id'
        ;;
    esac

  fi
fi

