#!/bin/bash

function write_issue() {
  ISSUE_ID=$1
  VALUES=$2
  CURL_STRING=$(echo "$VALUES" | sed -e "s/^/{'issue':{/g" -e "s/$/}}/g" -e "s/'/\"/g")
  echo "$CURL_STRING" |\
  curl -X PUT -H "Content-type:application/json" -s -3 -d @- "https://${SERVER}/issues/${ISSUE_ID}.json?key=${KEY}"
}

function modify_custom_json() {
  local ID="$1"
  local JSON="$2"  
  local JSON_MODIFICATION="$3"
  local OLD_VALUE=$(echo "$JSON" | jq -r ".description")
  if [ $(assert_json "$OLD_VALUE") ]; then
    #redtask 3126 des "{\\\"hi\\\":4}"
    # $2='.a="4" | .b=5'
    if [ -z "$OLD_VALUE" ];then
      #echo "old description was empty"
      OLD_VALUE="{}"
    fi
  else
    OLD_VALUE="{}"
    echo "old description was not a json content" 1>&2
  fi

  local NEW_VALUE=$(echo "$OLD_VALUE" | jq -c "$JSON_MODIFICATION" | sed -e 's/"/\\\"/g')
  #echo "New: $NEW_VALUE" 1>&2
  write_issue $ID "'description':'$NEW_VALUE'"
}

if [ "$#" -ge 1 ]; then
  if [ "$1" = "append" ]; then
    shift
    APPEND=1
  fi
fi

if [ "$#" -ge 1 ]; then

  if [ "$1" = "done" ]; then
    shift
    for ID in $IDS; do
      write_issue $ID "'status_id':'5'"
    done

  elif [ "$1" = "rejected" ]; then
    shift
    for ID in $IDS; do
      write_issue $ID "'status_id':'6'"
    done

  elif [ "$1" = "blocked" ]; then
    shift
    for ID in $IDS; do
      write_issue $ID "'status_id':'4'"
    done

  elif [ "$1" = "doing" ]; then
    shift
    for ID in $IDS; do
      write_issue $ID "'status_id':'2'"
    done

  elif [ "$1" = "delete" ]; then
    shift
    for ID in $IDS; do
      curl -X DELETE -s -3 "https://$SERVER/issues/$ID.json?key=$KEY"
    done
  fi

  if [ "$#" -ge 2 ]; then

    if [ "$1" = "assign" ]; then
      OWNER="$2"
      shift
      shift
      for ID in $IDS; do
        write_issue $ID "'assigned_to_id':$OWNER"
      done

    elif [ "$1" = "parent" ]; then
      PARENT="$2"
      shift
      shift
      for ID in $IDS; do
        write_issue $ID "'parent_issue_id':$PARENT"
      done

    elif [ "$1" = "key" ] && [ "$#" -ge 3 ]; then
      KEY_NAME="$2"
      VALUE_ARGUMENT="$3"
      shift
      shift
      shift
      for ID in $IDS
      do
        if [ -n "$APPEND" ]; then
          load_json_content_of_ids
          OLD_VALUE="$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ID)|.$KEY_NAME")"
          NEW_VALUE="${OLD_VALUE} ${VALUE_ARGUMENT}"
        else
          NEW_VALUE="$VALUE_ARGUMENT"
        fi
        write_issue $ID "'$KEY_NAME':'$NEW_VALUE'"
      done

    elif [ "$1" = "cjson" ]; then
      VALUE_ARGUMENT="$2"
      shift
      shift
      load_json_content_of_ids

      #redtask 3277 cjson '.tags+=["hi"]'
      #redtask 3277 cjson '.+{"c":4}'
      #redtask 3277 cjson '.b=5'

      for ID in $IDS
      do
        JSON=$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ID)")
        modify_custom_json "$ID" "$JSON" "$VALUE_ARGUMENT"
      done

    elif [ "$1" = "json" ]; then
      VALUE_ARGUMENT="$2"
      shift
      shift
      load_json_content_of_ids

      for ID in $IDS
      do
        OLD_VALUE=$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ID)|.description")
        if [ -n "$APPEND" ]; then
          if [ $(assert_json "$OLD_VALUE") ]; then
            #redtask 3126 des "{\\\"hi\\\":4}"
            # $2='.a="4" | .b=5'
            if [ -z "$OLD_VALUE" ];then
              #echo "old description was empty"
              OLD_VALUE="{}"
            fi
            NEW_VALUE=$(echo "$OLD_VALUE" | jq -c "$VALUE_ARGUMENT" | sed -e 's/"/\\\"/g')
            write_issue $ID "'description':'$NEW_VALUE'"
          else
            echo "old description was not a json content"
          fi
        else
          NEW_VALUE=$(echo "$VALUE_ARGUMENT" | sed -e 's/"/\\\"/g')
          write_issue $ID "'description':'$NEW_VALUE'"
        fi
      done

    elif [ "$1" = "add_feature" ]; then
      SUBJECT="$2"
      shift
      shift
      if [ -z "$IDS" ];then
        KEY_VALUES=""
        if [ -n "$ASSIGN_TO_OWNER" ]; then
          KEY_VALUES=",'assigned_to_id':$ASSIGN_TO_OWNER"
        fi
        echo "'subject':'$SUBJECT'$KEY_VALUES" |\
        sed -e "s/$/,'project_id':$PROJECT_ID/g" |\
        sed -e "s/$/,'tracker_id':2/g" |\
        sed -e "s/^/{'issue':{/g" -e "s/$/}}/g" -e "s/'/\"/g" |\
        curl -X POST -H "Content-type:application/json" -s -3 -d @- "https://$SERVER/issues.json?key=$KEY" |\
        jq '.issue.id'

      fi

    elif [ "$1" = "add_task" ]; then
      SUBJECT="$2"
      shift
      shift
      if [ -z "$IDS" ];then
        KEY_VALUES=""
        if [ -n "$ASSIGN_TO_OWNER" ]; then
          KEY_VALUES=",'assigned_to_id':$ASSIGN_TO_OWNER"
        fi
        echo "'subject':'$SUBJECT'$KEY_VALUES" |\
        sed -e "s/$/,'project_id':$PROJECT_ID/g" |\
        sed -e "s/$/,'tracker_id':4/g" |\
        sed -e "s/^/{'issue':{/g" -e "s/$/}}/g" -e "s/'/\"/g" |\
        curl -X POST -H "Content-type:application/json" -s -3 -d @- "https://$SERVER/issues.json?key=$KEY" |\
        jq '.issue.id'
      else
        for ID in $IDS; do
          KEY_VALUES=""
          if [ -n "$ASSIGN_TO_OWNER" ]; then
            KEY_VALUES=",'assigned_to_id':$ASSIGN_TO_OWNER"
          fi
          echo "'subject':'$SUBJECT'$KEY_VALUES" |\
          sed -e "s/$/,'project_id':$PROJECT_ID/g" |\
          sed -e "s/$/,'parent_issue_id':$ID/g" |\
          sed -e "s/$/,'tracker_id':4/g" |\
          sed -e "s/^/{'issue':{/g" -e "s/$/}}/g" -e "s/'/\"/g" |\
          curl -X POST -H "Content-type:application/json" -s -3 -d @- "https://$SERVER/issues.json?key=$KEY" |\
          jq '.issue.id'
        done
      fi
    fi

  fi

fi
