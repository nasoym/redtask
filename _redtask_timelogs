#!/bin/bash

while true; do
  if [ "$#" -ge 1 ]; then

    if [ $(echo "$1" | grep "^timelog") ]; then
      PARAM_1=$(echo "$1" | sed -e 's/^timelog//g' -e 's/^\(:[^:]*\):*.*$/\1/g' -e 's/^://g')
      PARAM_2=$(echo "$1" | sed -e 's/^timelog//g' -e 's/^:[^:]*\(:*.*\)$/\1/g' -e 's/^://g')
      shift
      DAYS_TO_SHOW="3"
      COMMENT_FILTER=""
      #echo "PARAM_1:>$PARAM_1<"
      #echo "PARAM_2:>$PARAM_2<"
      if [[ "$PARAM_1" =~ ^[0-9]+$ ]];then
        #echo "param 1 one is weeks to show"
        DAYS_TO_SHOW="$PARAM_1"
      elif [ -n "$PARAM_1" ];then 
        #echo "param 1 one filter"
        COMMENT_FILTER="$PARAM_1"
      fi
      if [[ "$PARAM_2" =~ ^[0-9]+$ ]];then
        #echo "param 2 one is weeks to show"
        DAYS_TO_SHOW="$PARAM_2"
      elif [ -n "$PARAM_2" ];then 
        #echo "param 2 one filter"
        COMMENT_FILTER="$PARAM_2"
      fi
      #echo "DAYS_TO_SHOW:>$DAYS_TO_SHOW<"
      #echo "COMMENT_FILTER:>$COMMENT_FILTER<"
      #exit 0
      TIME_ENTRIES=$(curl -s "https://$SERVER/projects/$PROJECT_ID/time_entries.json?limit=${ISSUE_LIMIT}&key=$KEY" |\
      jq '.time_entries' |\
      jq '. | sort_by(.spent_on)')

      TIME_GROUPS=$(echo "$TIME_ENTRIES" | jq '. | group_by(.spent_on)' | jq -c ".[-$DAYS_TO_SHOW:]")
      TIME_ENTRIES=$(echo "$TIME_GROUPS" | jq -c '[.[][]]')
      if [ -n "$COMMENT_FILTER" ];then
        TIME_ENTRIES=$(echo "$TIME_ENTRIES" | jq -c "map(select(.comments|contains(\"$COMMENT_FILTER\")))")
      fi

      IDS=$(echo "$TIME_GROUPS" | jq -r -c '.[][] | .issue.id' | sort | uniq)
      #IDS=$(echo "$IDS" | sort | uniq)
      ALL_TASKS_JSON=""
      load_json_content_of_ids
      TIME_IDS=$(echo "$TIME_ENTRIES"| jq '.[] | .id')
      for ID in $TIME_IDS;do
        JSON=$(echo "$TIME_ENTRIES" | jq -r ".[]| select(.id==$ID)")
        ISSUE_ID=$(echo "$JSON" | jq '.issue.id')
        ISSUE_JSON=$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ISSUE_ID)")
        TIME_ENTRIES=$(echo "$TIME_ENTRIES" | jq -c -r "map(if(.id==$ID)then .issue_json=$ISSUE_JSON else . end)")
      done

      echo "$TIME_ENTRIES" |\
      jq '. | group_by(.spent_on)' |\
      jq -r -c ".[] | \
\"\(.[0].spent_on)\",\
(.[] |\
\"    \(.issue.id): \(.id): \(.hours): '\(.comments//\"\")'\
: \(.issue_json.subject)\
 (status:\(.issue_json.status.name))\
 (estimate:\(.issue_json.estimated_hours))\
\"\
),\
\"          \([.[] | .hours] | add)\"\
" |\
    sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g"

      echo "$( date +%F) : today"
# \(.user.name)

    elif [ $(echo "$1" | grep "^spent:") ]; then
      
      #SPENT_HOURS=$(echo "$1" | sed 's/^spent:\(.*\):.*:.*$/\1/g')
      #SPENT_ON="$(date +%Y)-$(echo "$1" | sed 's/^spent:.*:\(.*\):.*$/\1/g')"
      #COMMENTS="$(echo "$1" | sed 's/^spent:.*:.*:\(.*\)$/\1/g')"

      PARAM_1=$(echo "$1" | sed -e 's/^spent://g' -e 's/^\([^:]*\):*.*$/\1/g')
      PARAM_2=$(echo "$1" | sed -e 's/^spent://g' -e 's/^[^:]*:*\([^:]*\).*$/\1/g')
      PARAM_3=$(echo "$1" | sed -e 's/^spent://g' -e 's/^[^:]*:*[^:]*:*\([^:]*\).*$/\1/g')
      #echo "PARAM_1:>$PARAM_1<"
      #echo "PARAM_2:>$PARAM_2<"
      #echo "PARAM_3:>$PARAM_3<"

      # SPENT_HOURS: 4 or 4.5 or .5
      # SPENT_ON: 03-14 or 15-03-14 or 2014-03-14 or emtpy (today)
      # COMMENTS: any string

      if [[ "$PARAM_1" =~ ^[0-9]*\.?[0-9]+$ ]];then
        #echo "PARAM_1 one is spent time"
        SPENT_HOURS="$PARAM_1"
      elif [[ "$PARAM_1" =~ ^[0-9]{2}-[0-9]{2}$ ]];then
        #echo "PARAM_1 one is date without year"
        SPENT_ON="$(date +%Y)-$PARAM_1"
      elif [[ "$PARAM_1" =~ ^([0-9]{2}|[0-9]{4})-[0-9]{2}-[0-9]{2}$ ]];then
        #echo "PARAM_1 one is date"
        SPENT_ON="$PARAM_1"
      elif [ -n "$PARAM_1" ];then 
        #echo "PARAM_1 is unknown format"
        COMMENTS="$PARAM_1"
      fi

      if [[ "$PARAM_2" =~ ^[0-9]*\.?[0-9]+$ ]];then
        SPENT_HOURS="$PARAM_2"
      elif [[ "$PARAM_2" =~ ^[0-9]{2}-[0-9]{2}$ ]];then
        SPENT_ON="$(date +%Y)-$PARAM_2"
      elif [[ "$PARAM_2" =~ ^([0-9]{2}|[0-9]{4})-[0-9]{2}-[0-9]{2}$ ]];then
        SPENT_ON="$PARAM_2"
      elif [ -n "$PARAM_2" ];then 
        COMMENTS="$PARAM_2"
      fi

      if [[ "$PARAM_3" =~ ^[0-9]*\.?[0-9]+$ ]];then
        SPENT_HOURS="$PARAM_3"
      elif [[ "$PARAM_3" =~ ^[0-9]{2}-[0-9]{2}$ ]];then
        SPENT_ON="$(date +%Y)-$PARAM_3"
      elif [[ "$PARAM_3" =~ ^([0-9]{2}|[0-9]{4})-[0-9]{2}-[0-9]{2}$ ]];then
        SPENT_ON="$PARAM_3"
      elif [ -n "$PARAM_3" ];then 
        COMMENTS="$PARAM_3"
      fi

      shift

      #echo "SPENT_HOURS:>$SPENT_HOURS<"
      #echo "SPENT_ON:>$SPENT_ON<"
      #echo "COMMENTS:>$COMMENTS<"

      if [ -z "$SPENT_HOURS" ];then
        echo "missing information about spent time"
        exit 1
      fi
      TIME_ENTRY="'hours':'$SPENT_HOURS'"
      [ -n "$COMMENTS" ] && TIME_ENTRY+=",'comments':'$COMMENTS'"
      [ -n "$SPENT_ON" ] && TIME_ENTRY+=",'spent_on':'$SPENT_ON'"
      TIME_ENTRY+=",'activity_id':9"

      #echo "$TIME_ENTRY"

      for ID in $IDS; do
        echo "$TIME_ENTRY,'issue_id':$ID" |\
        sed -e "s/^/{'time_entry':{/g" -e "s/$/}}/g" -e "s/'/\"/g" |\
        curl -X POST -H "Content-type:application/json" -s -d @- "https://$SERVER/time_entries.json?key=$KEY" 
        echo
      done

    elif [ $(echo "$1" | grep "^del_time:[0-9]*$") ]; then
      TIME_ID=$(echo "$1" | sed 's/^del_time://g')
      shift
      curl -X DELETE -s "https://$SERVER/time_entries/$TIME_ID.json?key=$KEY"

    else
      break
    fi
  else
    break
  fi
done

