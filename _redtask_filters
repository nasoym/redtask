#!/bin/bash

while true;do
  if [ "$#" -ge 1 ]; then
    if [ $(echo "$1" | grep "^[0-9]*\(,[0-9]*\)*$") ]; then
      IDS=$(echo "$1" | tr ',' '\n')
      shift

    elif [ $(echo "$1" | grep "ids:[a-zA-Z0-9_-]\{1,\}") ]; then
      VARIABLE_NAME=$(echo "$1" | sed 's/^ids://g')
      shift
      #TODO: how to append to existing id list
      IDS="$(eval $VARIABLE_NAME)"

    elif [ $(echo "$1" | grep "json:stdin") ]; then
      shift
      ALL_TASKS_JSON="$(cat)"
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"
      ALL_TASKS_JSON="$(parse_custom_json_field "$ALL_TASKS_JSON" "$IDS")"

    elif [ $(echo "$1" | grep "json:[a-zA-Z0-9_-]\{1,\}") ]; then
      VARIABLE_NAME=$(echo "$1" | sed 's/^json://g')
      shift
      #TODO: how to append exisiting json
      ALL_TASKS_JSON="$(eval $VARIABLE_NAME)"
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"
      ALL_TASKS_JSON="$(parse_custom_json_field "$ALL_TASKS_JSON" "$IDS")"

    elif [ $(echo "$1" | grep "filter:[a-zA-Z0-9_-]\{1,\}") ]; then
      VARIABLE_NAME=$(echo "$1" | sed 's/^filter://g')
      shift
      load_json_content_of_ids
      #ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" | jq -c '[.[] | .children=(.children | del(.[] | select(.status_id == 5 or .status_id == 6)) )]')
      #ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" | jq -c '[.[]| select(.story_points>2.5)]' )
      ALL_TASKS_JSON="$(eval $VARIABLE_NAME)"

    elif [ $(echo "$1" | grep "\<assigned:[0-9]*\>") ]; then
      USER_ID=$(echo "$1" | sed 's/^assigned://g')
      shift
      #TODO: how to provide a list of assignees
      ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" | jq -c "[.[]| select(.assigned_to.id==$USER_ID)]" )

    elif [ $(echo "$1" | grep "\<assigned:[a-zA-Z0-9_-]*\>") ]; then
      USER_STRING=$(echo "$1" | sed 's/^assigned://g')
      shift
      MATCHING_USER_ID="$(project_member_by_name $USER_STRING)"
      if [ -n "$MATCHING_USER_ID" ];then
        ALL_TASKS_JSON=$(echo "$ALL_TASKS_JSON" | jq -c "[.[]| select(.assigned_to.id==$MATCHING_USER_ID)]" )
      fi

    #elif [ "$1" = "hierarchy" ]; then
    elif [[ $1 =~ ^hier($|(a$|ar$|arc$|arch$|archy$)) ]] || [ "$1" = "hrchy" ]; then
      shift
      #TODO: what to do with issues whos parent is not in the json structure
      #TODO: what to do with grandchildren
      #TODO: what to do when the children structure is already filled in the minimal form
      NO_PARENT="$(echo "$ALL_TASKS_JSON" | jq -c '[.[] | select(has("parent")|not)]')"
      WITH_PARENT="$(echo "$ALL_TASKS_JSON" | jq -c '[.[] | select(has("parent"))]')"
      IDS_WITH_PARENT="$(echo "$WITH_PARENT" | jq '.[]|.id')"
      for ID in $IDS_WITH_PARENT; do
        JSON="$(echo "$WITH_PARENT" | jq -r ".[]| select(.id==$ID)")"
        PARENT="$(echo "$JSON" | jq '.parent.id')"
        NO_PARENT="$(echo "$NO_PARENT" | jq -c "[.[] | if .id==$PARENT then .children+=[$JSON] else . end]")"
      done
      ALL_TASKS_JSON="$NO_PARENT"
      IDS="$( ids_from_json_array "$ALL_TASKS_JSON" )"

    else
      break
    fi
  else
    break
  fi
done
