#!/bin/bash

function issue() {
  local ISSUE_ID=$1
  local REDMINE_ISSUE=$(curl -s "https://${SERVER}/issues/${ISSUE_ID}.json?key=${KEY}&include=journals,children")
  local REDMINE_SINGLE_ISSUE=$(echo $REDMINE_ISSUE | jq -c '.issue')
  echo "$REDMINE_SINGLE_ISSUE"
}

function load_json_of_ids() {
  local IDS=$1
  local DEPTH=$2
  if [ -n "$DEPTH" ];then
    local NEXT_DEPTH=$(( DEPTH - 1 ))
  else
    local DEPTH=0
  fi
  local ALL_TASKS_JSON="["
  local FIRST_ELEMENT=true
  for ID in $IDS; do
    local TASK_JSON=$(issue $ID)

      if [ "$DEPTH" -gt 0 ];then
        local CHILD_IDS=$(echo "$TASK_JSON" | jq -r ".children[] | .id")
        if [ -n "$CHILD_IDS" ];then
          local CHILD_TASKS_JSON="$(load_json_of_ids "$CHILD_IDS" $NEXT_DEPTH)"
          local CHILD_TASKS_JSON="$(parse_custom_json_field "$CHILD_TASKS_JSON" "$CHILD_IDS")"
          local TASK_JSON=$(echo "$TASK_JSON" | jq -c ".children=$CHILD_TASKS_JSON")
        fi
      fi

    if [ "$FIRST_ELEMENT" = true ]; then
      local FIRST_ELEMENT=false
    else
      local ALL_TASKS_JSON="${ALL_TASKS_JSON},"
    fi
    local ALL_TASKS_JSON="${ALL_TASKS_JSON}${TASK_JSON}"
  done
  local ALL_TASKS_JSON="${ALL_TASKS_JSON}]"
  echo "$ALL_TASKS_JSON"
}

function reload_json_content_of_ids() {
  ALL_TASKS_JSON="$(load_json_of_ids "$IDS" 0)"
  ALL_TASKS_JSON="$(parse_custom_json_field "$ALL_TASKS_JSON" "$IDS")"
}

function load_json_content_of_ids() {
  if [ -z "$ALL_TASKS_JSON" ] && [ -n "$IDS" ];then
    #echo " load json of ids" 1>&2
    reload_json_content_of_ids
  elif [ -z "$ALL_TASKS_JSON" ] && [ -z "$IDS" ];then
    #echo "no content" 1>&2
    ALL_TASKS_JSON="[]"
  fi
}

function write_issue() {
  local ISSUE_ID=$1
  local VALUES="$(echo "$2" | perl -p -e 's/\n/\\n/g' | sed -e 's/\\n$//g')"
  local CURL_STRING="$(echo "$VALUES" | sed -e "s/^/{'issue':{/g" -e "s/$/}}/g" -e "s/'/\"/g")"
  echo "$CURL_STRING" |\
  curl -X PUT -H "Content-type:application/json" -s -d @- "https://${SERVER}/issues/${ISSUE_ID}.json?key=${KEY}"
  #echo "$CURL_STRING"
}

function trackers() {
  curl -s  "https://$SERVER/trackers.json?key=$KEY" \
  | jq -c '.trackers'
}

function categories() {
  curl -s  "https://$SERVER/projects/$PROJECT_ID/issue_categories.json?key=$KEY" \
  | jq -c '.issue_categories' \
  | jq -r -c '[.[] | {id: .id, name: .name}]'
}

function versions() {
  curl -s  "https://$SERVER/projects/$PROJECT_ID/versions.json?key=$KEY" \
  | jq -c '.versions' \
  | jq -c '[.[] | {id: .id, name: .name, description: .description}]'
}

function issue_statuses() {
  curl -s "https://$SERVER/issue_statuses.json?key=$KEY" \
  | jq -c '.issue_statuses' \
  | jq -c '[.[] | {id: .id, name: .name}]'
}

function project_members() {
  curl -s "https://$SERVER/projects/$PROJECT_ID/memberships.json?key=$KEY" \
  | jq -c '.memberships' \
  | jq -r -c '[.[] | {id: .id, user: .user}]'
}

function project_member_by_name() {
  local USER_NAME_STRING="$1"
  local ALL_MEMBERS_JSON="$(project_members | tr '[:upper:]' '[:lower:]')"
  local MATCHING_USER_IDS="$(echo "$ALL_MEMBERS_JSON" | jq "[.[] | select(.user.name | contains(\"$USER_NAME_STRING\")) | .user.id]")"
  local MATCHING_USER_IDS_COUNT="$(echo "$MATCHING_USER_IDS" | jq 'length')"
  if [ "$MATCHING_USER_IDS_COUNT" -eq 1 ];then
    local MATCHING_USER_ID="$(echo "$MATCHING_USER_IDS" | jq '.[]')"
    echo "$MATCHING_USER_ID"
  else
    echo
  fi
}

function category_by_name() {
  local CATEGORY_STRING="$1"
  local ALL_CATEGORIES_JSON="$(categories | tr '[:upper:]' '[:lower:]')"
  local MATCHING_CATEGORY_IDS="$(echo "$ALL_CATEGORIES_JSON" | jq "[.[] | select(.name | contains(\"$CATEGORY_STRING\")) | .id]")"
  local MATCHING_CATEGORY_IDS_COUNT="$(echo "$MATCHING_CATEGORY_IDS" | jq 'length')"
  if [ "$MATCHING_CATEGORY_IDS_COUNT" -eq 1 ];then
    local MATCHING_CATEGORY_ID="$(echo "$MATCHING_CATEGORY_IDS" | jq '.[]')"
    echo "$MATCHING_CATEGORY_ID"
  else
    #echo "category: $CATEGORY_ID had multiple matches in project categories"
    #exit
    echo
  fi
}

function version_by_name() {
  local VERSION_STRING="$1"
  local ALL_VERSION_JSON="$(versions | tr '[:upper:]' '[:lower:]')"
  local MATCHING_VERSION_IDS="$(echo "$ALL_VERSION_JSON" | jq "[.[] | select(.name | contains(\"$VERSION_STRING\")) | .id]")"
  local MATCHING_VERSION_IDS_COUNT="$(echo "$MATCHING_VERSION_IDS" | jq 'length')"
  if [ "$MATCHING_VERSION_IDS_COUNT" -eq 1 ];then
    local MATCHING_VERSION_ID="$(echo "$MATCHING_VERSION_IDS" | jq '.[]')"
    echo "$MATCHING_VERSION_ID"
  else
    echo
  fi
}

function current_user_id() {
  curl -s  "https://$SERVER/users/current.json?key=$KEY" |\
  jq '.user.id'
}

function projects() {
  curl -s  "https://$SERVER/projects.json?key=$KEY"
}

function project_details() {
  curl -s  "https://$SERVER/projects/$PROJECT_ID.json?key=$KEY"
}

function parse_custom_json_field() {
  local JSON_CONTENT="$1"
  local CONTENT_IDS="$2"
  #echo "parse_custom_json_field" 1>&2
  for ID in $CONTENT_IDS; do
    local DESCRIPTION=$(echo "$JSON_CONTENT" | jq -r -c ".[]| select(.id==$ID) |.$CUSTOM_JSON_KEY")
    #echo "ID:$ID" 1>&2
    #echo "DESCRIPTION:>$DESCRIPTION<" 1>&2
    #for I in $(echo "$DESCRIPTION" | grep "^@[^:]*:.*$"); do
    #  echo "$I" | sed -e 's/^@//g' -e 's/^\([^:]*\):/\1":/g' -e 's/^/{"/g' -e 's/$/}/g' 1>&2
    #done
    local CUSTOM_JSON="$(for I in $(echo "$DESCRIPTION" | grep "^@[^:]*:.*$"); do echo "$I" | sed -e 's/^@//g' -e 's/^\([^:]*\):/\1":/g' -e 's/^/{"/g' -e 's/$/}/g'; done | jq -s -c ".|add" 2>/dev/null || echo "")"
    #echo ">>>$CUSTOM_JSON<<<" 1>&2
    if [ "$CUSTOM_JSON" != "null" ] && [ -n "$CUSTOM_JSON" ] ;then
      if [ $(assert_json "$CUSTOM_JSON") ]; then
        #echo "valid json" 1>&2
        local JSON_CONTENT=$(echo "$JSON_CONTENT" |\
          jq -c "[.[] | if .id==$ID then .cjson=$CUSTOM_JSON else . end]"\
          )
      #else
      #  echo "invalid json" 1>&2
      fi
    fi
  done
  echo "$JSON_CONTENT" 
}

