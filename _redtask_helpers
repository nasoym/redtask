#!/bin/bash

function issue() {
  local ISSUE_ID=$1
  local REDMINE_ISSUE=$(curl -s "https://${SERVER}/issues/${ISSUE_ID}.json?key=${KEY}&include=journals,children")
  local REDMINE_SINGLE_ISSUE=$(echo $REDMINE_ISSUE | jq -c '.issue')
  echo "$REDMINE_SINGLE_ISSUE"
}

function load_json_of_ids() {
  IDS=$1
  DEPTH=$2
  if [ -n "$DEPTH" ];then
    NEXT_DEPTH=$(( DEPTH - 1 ))
  else
    DEPTH=0
  fi
  ALL_TASKS_JSON="["
  FIRST_ELEMENT=true
  for ID in $IDS; do
    TASK_JSON=$(issue $ID)

      if [ "$DEPTH" -gt 0 ];then
        CHILD_IDS=$(echo "$TASK_JSON" | jq -r ".children[] | .id")
        if [ -n "$CHILD_IDS" ];then
          CHILD_TASKS_JSON="$(load_json_of_ids "$CHILD_IDS" $NEXT_DEPTH)"
          CHILD_TASKS_JSON="$(parse_custom_json_field "$CHILD_TASKS_JSON" "$CHILD_IDS")"
          TASK_JSON=$(echo "$TASK_JSON" | jq -c ".children=$CHILD_TASKS_JSON")
        fi
      fi

    if [ "$FIRST_ELEMENT" = true ]; then
      FIRST_ELEMENT=false
    else
      ALL_TASKS_JSON="${ALL_TASKS_JSON},"
    fi
    ALL_TASKS_JSON="${ALL_TASKS_JSON}${TASK_JSON}"
  done
  ALL_TASKS_JSON="${ALL_TASKS_JSON}]"
  echo "$ALL_TASKS_JSON"
}

function load_json_content_of_ids() {
  if [ -z "$ALL_TASKS_JSON" ] && [ -n "$IDS" ];then
    #echo " load json of ids" 1>&2
    ALL_TASKS_JSON="$(load_json_of_ids "$IDS" 0)"
    ALL_TASKS_JSON="$(parse_custom_json_field "$ALL_TASKS_JSON" "$IDS")"
  elif [ -z "$ALL_TASKS_JSON" ] && [ -z "$IDS" ];then
    echo "no content" 1>&2
    ALL_TASKS_JSON="[]"
  fi
}

function write_issue() {
  local ISSUE_ID=$1
  local VALUES=$2
  local CURL_STRING=$(echo "$VALUES" | sed -e "s/^/{'issue':{/g" -e "s/$/}}/g" -e "s/'/\"/g")
  echo "$CURL_STRING" |\
  curl -X PUT -H "Content-type:application/json" -s -d @- "https://${SERVER}/issues/${ISSUE_ID}.json?key=${KEY}"
}

function modifier_string_for_custom_json() {
  local JSON="$1"
  local JSON_MODIFICATION="$2"
  local OLD_VALUE=$(echo "$JSON" | jq -r ".$CUSTOM_JSON_KEY")
  if [ $(assert_json "$OLD_VALUE") ]; then
    if [ -z "$OLD_VALUE" ];then
      local OLD_VALUE="{}"
    fi
  else
    local OLD_VALUE="{}"
    #echo "old description was not a json content!" 1>&2
  fi
  local NEW_VALUE=$(echo "$OLD_VALUE" | jq -c "$JSON_MODIFICATION" | sed -e 's/"/\\\"/g')
  echo "'$CUSTOM_JSON_KEY':'$NEW_VALUE'"
}

function issue_statuses() {
  curl -s "https://$SERVER/issue_statuses.json?key=$KEY"
}

function project_members() {
  curl -s "https://$SERVER/projects/$PROJECT_ID/memberships.json?key=$KEY" |\
  jq -c '.memberships'
  #jq -r '(.memberships[] | .user | "\(.name) : \(.id)")'
}

function project_member_by_name() {
  local USER_NAME_STRING="$1"
  local ALL_MEMBERS_JSON="$(project_members | tr '[:upper:]' '[:lower:]')"
  local MATCHING_USER_IDS="$(echo "$ALL_MEMBERS_JSON" | jq "[.[] | select(.user.name | contains(\"$USER_NAME_STRING\")) | .user.id]")"
  local MATCHING_USER_IDS_COUNT="$(echo "$MATCHING_USER_IDS" | jq 'length')"
  if [ "$MATCHING_USER_IDS_COUNT" -eq 1 ];then
    local MATCHING_USER_ID="$(echo "$MATCHING_USER_IDS" | jq '.[]')"
    echo "$MATCHING_USER_ID"
  else
    echo
  fi
}

#TODO:
function load_json_content_for_ids() {
  :
}

function parse_custom_json_field() {
  local JSON_CONTENT="$1"
  local CONTENT_IDS="$2"
  for ID in $CONTENT_IDS; do
    local DESCRIPTION=$(echo "$JSON_CONTENT" | jq -r -c ".[]| select(.id==$ID) |.$CUSTOM_JSON_KEY")
    if [ -n "$DESCRIPTION" ] && [ $(assert_json "$DESCRIPTION") ]; then
      #echo "DESCRIPTION IS JSON" 1>&2
      local JSON_CONTENT=$(echo "$JSON_CONTENT" |\
        jq -c "[.[] | if .id==$ID then .cjson=$DESCRIPTION else . end]"\
        )
    fi
  done
  echo "$JSON_CONTENT" 
}

#TODO:
function load_json_content_of_children() {
  :
}

