#!/bin/bash

MODIFIER=""
MODIFICATION_VALUES=()

while true;do
  if [ "$#" -ge 1 ]; then

    if [ "$1" = "append" ]; then
      shift
      APPEND=1

    elif [ "$1" = "done" ]; then
      shift
      for ID in $IDS; do
        write_issue $ID "'status_id':'5'"
      done

    elif [ "$1" = "rejected" ]; then
      shift
      for ID in $IDS; do
        write_issue $ID "'status_id':'6'"
      done

    elif [ "$1" = "blocked" ]; then
      shift
      for ID in $IDS; do
        write_issue $ID "'status_id':'4'"
      done

    elif [ "$1" = "doing" ]; then
      shift
      for ID in $IDS; do
        write_issue $ID "'status_id':'2'"
      done

    elif [ "$1" = "delete" ]; then
      shift
      for ID in $IDS; do
        curl -X DELETE -s -3 "https://$SERVER/issues/$ID.json?key=$KEY"
      done

    elif [ $(echo "$1" | grep "\<estimate:[0-9]*\>") ]; then
      ESTIMATED_HOURS=$(echo "$1" | sed 's/^estimate://g')
      shift
      MODIFICATION_VALUES+=("'estimated_hours':$ESTIMATED_HOURS")
#      for ID in $IDS; do
#        write_issue $ID "'estimated_hours':$ESTIMATED_HOURS"
#      done

    elif [ $(echo "$1" | grep "\<version:[0-9]*\>") ]; then
      VERSION=$(echo "$1" | sed 's/^version://g')
      shift
      MODIFICATION_VALUES+=("'fixed_version_id':$VERSION")

    elif [ $(echo "$1" | grep "\<assign:[0-9]*\>") ]; then
      OWNER=$(echo "$1" | sed 's/^assign://g')
      shift
      MODIFICATION_VALUES+=("'assigned_to_id':$OWNER")
#      for ID in $IDS; do
#        write_issue $ID "'assigned_to_id':$OWNER"
#      done

    elif [ $(echo "$1" | grep "\<assign:[a-zA-Z0-9_-]*\>") ]; then
      USER_STRING="$(echo "$1" | sed 's/^assign://g')"
      shift
      MATCHING_USER_ID="$(project_member_by_name $USER_STRING)"
      if [ -n "$MATCHING_USER_ID" ];then
        MODIFICATION_VALUES+=("'assigned_to_id':$MATCHING_USER_ID")
#        for ID in $IDS; do
#          write_issue $ID "'assigned_to_id':$MATCHING_USER_ID"
#        done
      else
        echo "no or more than one user with:'$USER_STRING' was found." 1>&2
      fi

    elif [ $(echo "$1" | grep "\<parent:[0-9]*\>") ]; then
      PARENT="$(echo "$1" | sed 's/^parent://g')"
      shift
      MODIFICATION_VALUES+=("'parent_issue_id':$PARENT")
#      for ID in $IDS; do
#        write_issue $ID "'parent_issue_id':$PARENT"
#      done

    elif [ "$1" = "key" ] && [ "$#" -ge 3 ]; then
      KEY_NAME="$2"
      VALUE_ARGUMENT="$3"
      shift
      shift
      shift
      for ID in $IDS
      do
        if [ -n "$APPEND" ]; then
          load_json_content_of_ids
          OLD_VALUE="$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ID)|.$KEY_NAME")"
          NEW_VALUE="${OLD_VALUE} ${VALUE_ARGUMENT}"
        else
          NEW_VALUE="$VALUE_ARGUMENT"
        fi
        write_issue $ID "'$KEY_NAME':'$NEW_VALUE'"
      done

    elif [ "$1" = "cjson" ] && [ "$#" -ge 2 ]; then
      VALUE_ARGUMENT="$2"
      shift
      shift
      load_json_content_of_ids

      #redtask 3277 cjson '.tags+=["hi"]'
      #redtask 3277 cjson '.+{"c":4}'
      #redtask 3277 cjson '.b=5'

      for ID in $IDS
      do
        JSON=$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ID)")
        modify_custom_json "$ID" "$JSON" "$VALUE_ARGUMENT"
      done

    elif [ "$1" = "json" ] && [ "$#" -ge 2 ]; then
      VALUE_ARGUMENT="$2"
      shift
      shift
      load_json_content_of_ids

      for ID in $IDS
      do
        OLD_VALUE=$(echo "$ALL_TASKS_JSON" | jq -r ".[]| select(.id==$ID)|.description")
        if [ -n "$APPEND" ]; then
          if [ $(assert_json "$OLD_VALUE") ]; then
            #redtask 3126 des "{\\\"hi\\\":4}"
            # $2='.a="4" | .b=5'
            if [ -z "$OLD_VALUE" ];then
              #echo "old description was empty"
              OLD_VALUE="{}"
            fi
            NEW_VALUE=$(echo "$OLD_VALUE" | jq -c "$VALUE_ARGUMENT" | sed -e 's/"/\\\"/g')
            write_issue $ID "'description':'$NEW_VALUE'"
          else
            echo "old description was not a json content"
          fi
        else
          NEW_VALUE=$(echo "$VALUE_ARGUMENT" | sed -e 's/"/\\\"/g')
          write_issue $ID "'description':'$NEW_VALUE'"
        fi
      done

    elif [ "$1" = "mo" ]; then
      shift
      MODIFIER="mo"

    elif [ "$(echo "$1" | grep "\<add_feature:.*")" ]; then
      SUBJECT_STRING="$(echo "$1" | sed -e 's/^add_feature://g')"
      shift
      MODIFIER="add"
      MODIFICATION_VALUES+=("'subject':'$SUBJECT_STRING'")
      MODIFICATION_VALUES+=("'project_id':$PROJECT_ID")
      MODIFICATION_VALUES+=("'tracker_id':2")
      if [ -n "$IDS" ] && [ "$(wc -l <<<"$IDS")" -eq 1 ];then
        MODIFICATION_VALUES+=("'parent_issue_id':$IDS")
      elif [ -n "$IDS" ];then
        echo "cannot create task for many parents!" 1>&2
        MODIFIER=""
      fi

    elif [ "$(echo "$1" | grep "\<\(add_task\|add\):.*")" ]; then
      #SUBJECT_STRING="$(echo "$1" | sed -e 's/^add_task://g')"
      SUBJECT_STRING="$(echo "$1" | sed -e 's/^add://g' -e 's/^add_task://g')"
      shift
      MODIFIER="add"
      MODIFICATION_VALUES+=("'subject':'$SUBJECT_STRING'")
      MODIFICATION_VALUES+=("'project_id':$PROJECT_ID")
      MODIFICATION_VALUES+=("'tracker_id':4")
      if [ -n "$IDS" ] && [ "$(wc -l <<<"$IDS")" -eq 1 ];then
        MODIFICATION_VALUES+=("'parent_issue_id':$IDS")
      elif [ -n "$IDS" ];then
        echo "cannot create task for many parents!" 1>&2
        MODIFIER=""
      fi

    else
      break
    fi
  else
    break
  fi
done


FIRST_ELEMENT=true
FINAL_MODIFICATION_STRING=""
for I in "${MODIFICATION_VALUES[@]}"
do
  if [ "$FIRST_ELEMENT" = true ]; then
    FIRST_ELEMENT=false
    FINAL_MODIFICATION_STRING="$I"
  else
    FINAL_MODIFICATION_STRING="$FINAL_MODIFICATION_STRING,$I"
  fi
done

case "$MODIFIER" in
  "" | "nop")
    #echo "NOP modifier" 1>&2
    ;;

  "mo")
    #echo "$FINAL_MODIFICATION_STRING"
    for ID in $IDS; do
      write_issue $ID "$FINAL_MODIFICATION_STRING"
    done
    ;;

  "add")
    #echo "ADD !!!! modifier" 1>&2
    echo "$FINAL_MODIFICATION_STRING" |\
    sed -e "s/^/{'issue':{/g" -e "s/$/}}/g" -e "s/'/\"/g" |\
    curl -X POST -H "Content-type:application/json" -s -3 -d @- "https://$SERVER/issues.json?key=$KEY" |\
    jq '.issue.id'
    ;;

  *)
    ;;
esac

